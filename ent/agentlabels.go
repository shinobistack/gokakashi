// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/shinobistack/gokakashi/ent/agentlabels"
	"github.com/shinobistack/gokakashi/ent/agents"
)

// AgentLabels is the model entity for the AgentLabels schema.
type AgentLabels struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Foreign key to Agents.ID.
	AgentID int `json:"agent_id,omitempty"`
	// Label key.
	Key string `json:"key,omitempty"`
	// Label value.
	Value string `json:"value,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AgentLabelsQuery when eager-loading is set.
	Edges        AgentLabelsEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AgentLabelsEdges holds the relations/edges for other nodes in the graph.
type AgentLabelsEdges struct {
	// Agents holds the value of the agents edge.
	Agents *Agents `json:"agents,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// AgentsOrErr returns the Agents value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AgentLabelsEdges) AgentsOrErr() (*Agents, error) {
	if e.Agents != nil {
		return e.Agents, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: agents.Label}
	}
	return nil, &NotLoadedError{edge: "agents"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AgentLabels) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case agentlabels.FieldID, agentlabels.FieldAgentID:
			values[i] = new(sql.NullInt64)
		case agentlabels.FieldKey, agentlabels.FieldValue:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AgentLabels fields.
func (al *AgentLabels) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case agentlabels.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			al.ID = int(value.Int64)
		case agentlabels.FieldAgentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field agent_id", values[i])
			} else if value.Valid {
				al.AgentID = int(value.Int64)
			}
		case agentlabels.FieldKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key", values[i])
			} else if value.Valid {
				al.Key = value.String
			}
		case agentlabels.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				al.Value = value.String
			}
		default:
			al.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// GetValue returns the ent.Value that was dynamically selected and assigned to the AgentLabels.
// This includes values selected through modifiers, order, etc.
func (al *AgentLabels) GetValue(name string) (ent.Value, error) {
	return al.selectValues.Get(name)
}

// QueryAgents queries the "agents" edge of the AgentLabels entity.
func (al *AgentLabels) QueryAgents() *AgentsQuery {
	return NewAgentLabelsClient(al.config).QueryAgents(al)
}

// Update returns a builder for updating this AgentLabels.
// Note that you need to call AgentLabels.Unwrap() before calling this method if this AgentLabels
// was returned from a transaction, and the transaction was committed or rolled back.
func (al *AgentLabels) Update() *AgentLabelsUpdateOne {
	return NewAgentLabelsClient(al.config).UpdateOne(al)
}

// Unwrap unwraps the AgentLabels entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (al *AgentLabels) Unwrap() *AgentLabels {
	_tx, ok := al.config.driver.(*txDriver)
	if !ok {
		panic("ent: AgentLabels is not a transactional entity")
	}
	al.config.driver = _tx.drv
	return al
}

// String implements the fmt.Stringer.
func (al *AgentLabels) String() string {
	var builder strings.Builder
	builder.WriteString("AgentLabels(")
	builder.WriteString(fmt.Sprintf("id=%v, ", al.ID))
	builder.WriteString("agent_id=")
	builder.WriteString(fmt.Sprintf("%v", al.AgentID))
	builder.WriteString(", ")
	builder.WriteString("key=")
	builder.WriteString(al.Key)
	builder.WriteString(", ")
	builder.WriteString("value=")
	builder.WriteString(al.Value)
	builder.WriteByte(')')
	return builder.String()
}

// AgentLabelsSlice is a parsable slice of AgentLabels.
type AgentLabelsSlice []*AgentLabels
