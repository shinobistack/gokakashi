// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/shinobistack/gokakashi/ent/agenttasks"
	"github.com/shinobistack/gokakashi/ent/integrations"
	"github.com/shinobistack/gokakashi/ent/policies"
	"github.com/shinobistack/gokakashi/ent/scanlabels"
	"github.com/shinobistack/gokakashi/ent/scannotify"
	"github.com/shinobistack/gokakashi/ent/scans"
	"github.com/shinobistack/gokakashi/ent/schema"
)

// ScansCreate is the builder for creating a Scans entity.
type ScansCreate struct {
	config
	mutation *ScansMutation
	hooks    []Hook
}

// SetPolicyID sets the "policy_id" field.
func (sc *ScansCreate) SetPolicyID(u uuid.UUID) *ScansCreate {
	sc.mutation.SetPolicyID(u)
	return sc
}

// SetStatus sets the "status" field.
func (sc *ScansCreate) SetStatus(s string) *ScansCreate {
	sc.mutation.SetStatus(s)
	return sc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sc *ScansCreate) SetNillableStatus(s *string) *ScansCreate {
	if s != nil {
		sc.SetStatus(*s)
	}
	return sc
}

// SetImage sets the "image" field.
func (sc *ScansCreate) SetImage(s string) *ScansCreate {
	sc.mutation.SetImage(s)
	return sc
}

// SetIntegrationID sets the "integration_id" field.
func (sc *ScansCreate) SetIntegrationID(u uuid.UUID) *ScansCreate {
	sc.mutation.SetIntegrationID(u)
	return sc
}

// SetNillableIntegrationID sets the "integration_id" field if the given value is not nil.
func (sc *ScansCreate) SetNillableIntegrationID(u *uuid.UUID) *ScansCreate {
	if u != nil {
		sc.SetIntegrationID(*u)
	}
	return sc
}

// SetScanner sets the "scanner" field.
func (sc *ScansCreate) SetScanner(s string) *ScansCreate {
	sc.mutation.SetScanner(s)
	return sc
}

// SetNotify sets the "notify" field.
func (sc *ScansCreate) SetNotify(s []schema.Notify) *ScansCreate {
	sc.mutation.SetNotify(s)
	return sc
}

// SetLabels sets the "labels" field.
func (sc *ScansCreate) SetLabels(sl schema.CommonLabels) *ScansCreate {
	sc.mutation.SetLabels(sl)
	return sc
}

// SetNillableLabels sets the "labels" field if the given value is not nil.
func (sc *ScansCreate) SetNillableLabels(sl *schema.CommonLabels) *ScansCreate {
	if sl != nil {
		sc.SetLabels(*sl)
	}
	return sc
}

// SetReport sets the "report" field.
func (sc *ScansCreate) SetReport(jm json.RawMessage) *ScansCreate {
	sc.mutation.SetReport(jm)
	return sc
}

// SetID sets the "id" field.
func (sc *ScansCreate) SetID(u uuid.UUID) *ScansCreate {
	sc.mutation.SetID(u)
	return sc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sc *ScansCreate) SetNillableID(u *uuid.UUID) *ScansCreate {
	if u != nil {
		sc.SetID(*u)
	}
	return sc
}

// SetPolicy sets the "policy" edge to the Policies entity.
func (sc *ScansCreate) SetPolicy(p *Policies) *ScansCreate {
	return sc.SetPolicyID(p.ID)
}

// SetIntegrationsID sets the "integrations" edge to the Integrations entity by ID.
func (sc *ScansCreate) SetIntegrationsID(id uuid.UUID) *ScansCreate {
	sc.mutation.SetIntegrationsID(id)
	return sc
}

// SetNillableIntegrationsID sets the "integrations" edge to the Integrations entity by ID if the given value is not nil.
func (sc *ScansCreate) SetNillableIntegrationsID(id *uuid.UUID) *ScansCreate {
	if id != nil {
		sc = sc.SetIntegrationsID(*id)
	}
	return sc
}

// SetIntegrations sets the "integrations" edge to the Integrations entity.
func (sc *ScansCreate) SetIntegrations(i *Integrations) *ScansCreate {
	return sc.SetIntegrationsID(i.ID)
}

// AddScanLabelIDs adds the "scan_labels" edge to the ScanLabels entity by IDs.
func (sc *ScansCreate) AddScanLabelIDs(ids ...int) *ScansCreate {
	sc.mutation.AddScanLabelIDs(ids...)
	return sc
}

// AddScanLabels adds the "scan_labels" edges to the ScanLabels entity.
func (sc *ScansCreate) AddScanLabels(s ...*ScanLabels) *ScansCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sc.AddScanLabelIDs(ids...)
}

// AddAgentTaskIDs adds the "agent_tasks" edge to the AgentTasks entity by IDs.
func (sc *ScansCreate) AddAgentTaskIDs(ids ...uuid.UUID) *ScansCreate {
	sc.mutation.AddAgentTaskIDs(ids...)
	return sc
}

// AddAgentTasks adds the "agent_tasks" edges to the AgentTasks entity.
func (sc *ScansCreate) AddAgentTasks(a ...*AgentTasks) *ScansCreate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return sc.AddAgentTaskIDs(ids...)
}

// AddScanNotificationIDs adds the "scan_notifications" edge to the ScanNotify entity by IDs.
func (sc *ScansCreate) AddScanNotificationIDs(ids ...uuid.UUID) *ScansCreate {
	sc.mutation.AddScanNotificationIDs(ids...)
	return sc
}

// AddScanNotifications adds the "scan_notifications" edges to the ScanNotify entity.
func (sc *ScansCreate) AddScanNotifications(s ...*ScanNotify) *ScansCreate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sc.AddScanNotificationIDs(ids...)
}

// Mutation returns the ScansMutation object of the builder.
func (sc *ScansCreate) Mutation() *ScansMutation {
	return sc.mutation
}

// Save creates the Scans in the database.
func (sc *ScansCreate) Save(ctx context.Context) (*Scans, error) {
	sc.defaults()
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *ScansCreate) SaveX(ctx context.Context) *Scans {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *ScansCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *ScansCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *ScansCreate) defaults() {
	if _, ok := sc.mutation.Status(); !ok {
		v := scans.DefaultStatus
		sc.mutation.SetStatus(v)
	}
	if _, ok := sc.mutation.ID(); !ok {
		v := scans.DefaultID()
		sc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *ScansCreate) check() error {
	if _, ok := sc.mutation.PolicyID(); !ok {
		return &ValidationError{Name: "policy_id", err: errors.New(`ent: missing required field "Scans.policy_id"`)}
	}
	if _, ok := sc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Scans.status"`)}
	}
	if v, ok := sc.mutation.Status(); ok {
		if err := scans.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Scans.status": %w`, err)}
		}
	}
	if _, ok := sc.mutation.Image(); !ok {
		return &ValidationError{Name: "image", err: errors.New(`ent: missing required field "Scans.image"`)}
	}
	if _, ok := sc.mutation.Scanner(); !ok {
		return &ValidationError{Name: "scanner", err: errors.New(`ent: missing required field "Scans.scanner"`)}
	}
	if len(sc.mutation.PolicyIDs()) == 0 {
		return &ValidationError{Name: "policy", err: errors.New(`ent: missing required edge "Scans.policy"`)}
	}
	return nil
}

func (sc *ScansCreate) sqlSave(ctx context.Context) (*Scans, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *ScansCreate) createSpec() (*Scans, *sqlgraph.CreateSpec) {
	var (
		_node = &Scans{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(scans.Table, sqlgraph.NewFieldSpec(scans.FieldID, field.TypeUUID))
	)
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := sc.mutation.Status(); ok {
		_spec.SetField(scans.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := sc.mutation.Image(); ok {
		_spec.SetField(scans.FieldImage, field.TypeString, value)
		_node.Image = value
	}
	if value, ok := sc.mutation.Scanner(); ok {
		_spec.SetField(scans.FieldScanner, field.TypeString, value)
		_node.Scanner = value
	}
	if value, ok := sc.mutation.Notify(); ok {
		_spec.SetField(scans.FieldNotify, field.TypeJSON, value)
		_node.Notify = value
	}
	if value, ok := sc.mutation.Labels(); ok {
		_spec.SetField(scans.FieldLabels, field.TypeJSON, value)
		_node.Labels = value
	}
	if value, ok := sc.mutation.Report(); ok {
		_spec.SetField(scans.FieldReport, field.TypeJSON, value)
		_node.Report = value
	}
	if nodes := sc.mutation.PolicyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scans.PolicyTable,
			Columns: []string{scans.PolicyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(policies.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PolicyID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.IntegrationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scans.IntegrationsTable,
			Columns: []string{scans.IntegrationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(integrations.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.IntegrationID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.ScanLabelsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scans.ScanLabelsTable,
			Columns: []string{scans.ScanLabelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scanlabels.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.AgentTasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scans.AgentTasksTable,
			Columns: []string{scans.AgentTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agenttasks.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.ScanNotificationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   scans.ScanNotificationsTable,
			Columns: []string{scans.ScanNotificationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scannotify.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ScansCreateBulk is the builder for creating many Scans entities in bulk.
type ScansCreateBulk struct {
	config
	err      error
	builders []*ScansCreate
}

// Save creates the Scans entities in the database.
func (scb *ScansCreateBulk) Save(ctx context.Context) ([]*Scans, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Scans, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ScansMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *ScansCreateBulk) SaveX(ctx context.Context) []*Scans {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *ScansCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *ScansCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
