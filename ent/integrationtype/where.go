// Code generated by ent, DO NOT EDIT.

package integrationtype

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/shinobistack/gokakashi/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.IntegrationType {
	return predicate.IntegrationType(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.IntegrationType {
	return predicate.IntegrationType(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.IntegrationType {
	return predicate.IntegrationType(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.IntegrationType {
	return predicate.IntegrationType(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.IntegrationType {
	return predicate.IntegrationType(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.IntegrationType {
	return predicate.IntegrationType(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.IntegrationType {
	return predicate.IntegrationType(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.IntegrationType {
	return predicate.IntegrationType(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.IntegrationType {
	return predicate.IntegrationType(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.IntegrationType {
	return predicate.IntegrationType(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.IntegrationType {
	return predicate.IntegrationType(sql.FieldContainsFold(FieldID, id))
}

// DisplayName applies equality check predicate on the "display_name" field. It's identical to DisplayNameEQ.
func DisplayName(v string) predicate.IntegrationType {
	return predicate.IntegrationType(sql.FieldEQ(FieldDisplayName, v))
}

// DisplayNameEQ applies the EQ predicate on the "display_name" field.
func DisplayNameEQ(v string) predicate.IntegrationType {
	return predicate.IntegrationType(sql.FieldEQ(FieldDisplayName, v))
}

// DisplayNameNEQ applies the NEQ predicate on the "display_name" field.
func DisplayNameNEQ(v string) predicate.IntegrationType {
	return predicate.IntegrationType(sql.FieldNEQ(FieldDisplayName, v))
}

// DisplayNameIn applies the In predicate on the "display_name" field.
func DisplayNameIn(vs ...string) predicate.IntegrationType {
	return predicate.IntegrationType(sql.FieldIn(FieldDisplayName, vs...))
}

// DisplayNameNotIn applies the NotIn predicate on the "display_name" field.
func DisplayNameNotIn(vs ...string) predicate.IntegrationType {
	return predicate.IntegrationType(sql.FieldNotIn(FieldDisplayName, vs...))
}

// DisplayNameGT applies the GT predicate on the "display_name" field.
func DisplayNameGT(v string) predicate.IntegrationType {
	return predicate.IntegrationType(sql.FieldGT(FieldDisplayName, v))
}

// DisplayNameGTE applies the GTE predicate on the "display_name" field.
func DisplayNameGTE(v string) predicate.IntegrationType {
	return predicate.IntegrationType(sql.FieldGTE(FieldDisplayName, v))
}

// DisplayNameLT applies the LT predicate on the "display_name" field.
func DisplayNameLT(v string) predicate.IntegrationType {
	return predicate.IntegrationType(sql.FieldLT(FieldDisplayName, v))
}

// DisplayNameLTE applies the LTE predicate on the "display_name" field.
func DisplayNameLTE(v string) predicate.IntegrationType {
	return predicate.IntegrationType(sql.FieldLTE(FieldDisplayName, v))
}

// DisplayNameContains applies the Contains predicate on the "display_name" field.
func DisplayNameContains(v string) predicate.IntegrationType {
	return predicate.IntegrationType(sql.FieldContains(FieldDisplayName, v))
}

// DisplayNameHasPrefix applies the HasPrefix predicate on the "display_name" field.
func DisplayNameHasPrefix(v string) predicate.IntegrationType {
	return predicate.IntegrationType(sql.FieldHasPrefix(FieldDisplayName, v))
}

// DisplayNameHasSuffix applies the HasSuffix predicate on the "display_name" field.
func DisplayNameHasSuffix(v string) predicate.IntegrationType {
	return predicate.IntegrationType(sql.FieldHasSuffix(FieldDisplayName, v))
}

// DisplayNameEqualFold applies the EqualFold predicate on the "display_name" field.
func DisplayNameEqualFold(v string) predicate.IntegrationType {
	return predicate.IntegrationType(sql.FieldEqualFold(FieldDisplayName, v))
}

// DisplayNameContainsFold applies the ContainsFold predicate on the "display_name" field.
func DisplayNameContainsFold(v string) predicate.IntegrationType {
	return predicate.IntegrationType(sql.FieldContainsFold(FieldDisplayName, v))
}

// HasIntegrations applies the HasEdge predicate on the "integrations" edge.
func HasIntegrations() predicate.IntegrationType {
	return predicate.IntegrationType(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, IntegrationsTable, IntegrationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasIntegrationsWith applies the HasEdge predicate on the "integrations" edge with a given conditions (other predicates).
func HasIntegrationsWith(preds ...predicate.Integrations) predicate.IntegrationType {
	return predicate.IntegrationType(func(s *sql.Selector) {
		step := newIntegrationsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.IntegrationType) predicate.IntegrationType {
	return predicate.IntegrationType(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.IntegrationType) predicate.IntegrationType {
	return predicate.IntegrationType(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.IntegrationType) predicate.IntegrationType {
	return predicate.IntegrationType(sql.NotPredicates(p))
}
