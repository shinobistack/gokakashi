// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/shinobistack/gokakashi/ent/predicate"
	"github.com/shinobistack/gokakashi/ent/scannotify"
	"github.com/shinobistack/gokakashi/ent/scans"
)

// ScanNotifyUpdate is the builder for updating ScanNotify entities.
type ScanNotifyUpdate struct {
	config
	hooks    []Hook
	mutation *ScanNotifyMutation
}

// Where appends a list predicates to the ScanNotifyUpdate builder.
func (snu *ScanNotifyUpdate) Where(ps ...predicate.ScanNotify) *ScanNotifyUpdate {
	snu.mutation.Where(ps...)
	return snu
}

// SetScanID sets the "scan_id" field.
func (snu *ScanNotifyUpdate) SetScanID(u uuid.UUID) *ScanNotifyUpdate {
	snu.mutation.SetScanID(u)
	return snu
}

// SetNillableScanID sets the "scan_id" field if the given value is not nil.
func (snu *ScanNotifyUpdate) SetNillableScanID(u *uuid.UUID) *ScanNotifyUpdate {
	if u != nil {
		snu.SetScanID(*u)
	}
	return snu
}

// SetHash sets the "hash" field.
func (snu *ScanNotifyUpdate) SetHash(s string) *ScanNotifyUpdate {
	snu.mutation.SetHash(s)
	return snu
}

// SetNillableHash sets the "hash" field if the given value is not nil.
func (snu *ScanNotifyUpdate) SetNillableHash(s *string) *ScanNotifyUpdate {
	if s != nil {
		snu.SetHash(*s)
	}
	return snu
}

// SetStatus sets the "status" field.
func (snu *ScanNotifyUpdate) SetStatus(s string) *ScanNotifyUpdate {
	snu.mutation.SetStatus(s)
	return snu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (snu *ScanNotifyUpdate) SetNillableStatus(s *string) *ScanNotifyUpdate {
	if s != nil {
		snu.SetStatus(*s)
	}
	return snu
}

// SetUpdatedAt sets the "updated_at" field.
func (snu *ScanNotifyUpdate) SetUpdatedAt(t time.Time) *ScanNotifyUpdate {
	snu.mutation.SetUpdatedAt(t)
	return snu
}

// SetScan sets the "scan" edge to the Scans entity.
func (snu *ScanNotifyUpdate) SetScan(s *Scans) *ScanNotifyUpdate {
	return snu.SetScanID(s.ID)
}

// Mutation returns the ScanNotifyMutation object of the builder.
func (snu *ScanNotifyUpdate) Mutation() *ScanNotifyMutation {
	return snu.mutation
}

// ClearScan clears the "scan" edge to the Scans entity.
func (snu *ScanNotifyUpdate) ClearScan() *ScanNotifyUpdate {
	snu.mutation.ClearScan()
	return snu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (snu *ScanNotifyUpdate) Save(ctx context.Context) (int, error) {
	snu.defaults()
	return withHooks(ctx, snu.sqlSave, snu.mutation, snu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (snu *ScanNotifyUpdate) SaveX(ctx context.Context) int {
	affected, err := snu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (snu *ScanNotifyUpdate) Exec(ctx context.Context) error {
	_, err := snu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (snu *ScanNotifyUpdate) ExecX(ctx context.Context) {
	if err := snu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (snu *ScanNotifyUpdate) defaults() {
	if _, ok := snu.mutation.UpdatedAt(); !ok {
		v := scannotify.UpdateDefaultUpdatedAt()
		snu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (snu *ScanNotifyUpdate) check() error {
	if v, ok := snu.mutation.Hash(); ok {
		if err := scannotify.HashValidator(v); err != nil {
			return &ValidationError{Name: "hash", err: fmt.Errorf(`ent: validator failed for field "ScanNotify.hash": %w`, err)}
		}
	}
	if snu.mutation.ScanCleared() && len(snu.mutation.ScanIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ScanNotify.scan"`)
	}
	return nil
}

func (snu *ScanNotifyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := snu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(scannotify.Table, scannotify.Columns, sqlgraph.NewFieldSpec(scannotify.FieldID, field.TypeUUID))
	if ps := snu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := snu.mutation.Hash(); ok {
		_spec.SetField(scannotify.FieldHash, field.TypeString, value)
	}
	if value, ok := snu.mutation.Status(); ok {
		_spec.SetField(scannotify.FieldStatus, field.TypeString, value)
	}
	if value, ok := snu.mutation.UpdatedAt(); ok {
		_spec.SetField(scannotify.FieldUpdatedAt, field.TypeTime, value)
	}
	if snu.mutation.ScanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scannotify.ScanTable,
			Columns: []string{scannotify.ScanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scans.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := snu.mutation.ScanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scannotify.ScanTable,
			Columns: []string{scannotify.ScanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scans.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, snu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scannotify.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	snu.mutation.done = true
	return n, nil
}

// ScanNotifyUpdateOne is the builder for updating a single ScanNotify entity.
type ScanNotifyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ScanNotifyMutation
}

// SetScanID sets the "scan_id" field.
func (snuo *ScanNotifyUpdateOne) SetScanID(u uuid.UUID) *ScanNotifyUpdateOne {
	snuo.mutation.SetScanID(u)
	return snuo
}

// SetNillableScanID sets the "scan_id" field if the given value is not nil.
func (snuo *ScanNotifyUpdateOne) SetNillableScanID(u *uuid.UUID) *ScanNotifyUpdateOne {
	if u != nil {
		snuo.SetScanID(*u)
	}
	return snuo
}

// SetHash sets the "hash" field.
func (snuo *ScanNotifyUpdateOne) SetHash(s string) *ScanNotifyUpdateOne {
	snuo.mutation.SetHash(s)
	return snuo
}

// SetNillableHash sets the "hash" field if the given value is not nil.
func (snuo *ScanNotifyUpdateOne) SetNillableHash(s *string) *ScanNotifyUpdateOne {
	if s != nil {
		snuo.SetHash(*s)
	}
	return snuo
}

// SetStatus sets the "status" field.
func (snuo *ScanNotifyUpdateOne) SetStatus(s string) *ScanNotifyUpdateOne {
	snuo.mutation.SetStatus(s)
	return snuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (snuo *ScanNotifyUpdateOne) SetNillableStatus(s *string) *ScanNotifyUpdateOne {
	if s != nil {
		snuo.SetStatus(*s)
	}
	return snuo
}

// SetUpdatedAt sets the "updated_at" field.
func (snuo *ScanNotifyUpdateOne) SetUpdatedAt(t time.Time) *ScanNotifyUpdateOne {
	snuo.mutation.SetUpdatedAt(t)
	return snuo
}

// SetScan sets the "scan" edge to the Scans entity.
func (snuo *ScanNotifyUpdateOne) SetScan(s *Scans) *ScanNotifyUpdateOne {
	return snuo.SetScanID(s.ID)
}

// Mutation returns the ScanNotifyMutation object of the builder.
func (snuo *ScanNotifyUpdateOne) Mutation() *ScanNotifyMutation {
	return snuo.mutation
}

// ClearScan clears the "scan" edge to the Scans entity.
func (snuo *ScanNotifyUpdateOne) ClearScan() *ScanNotifyUpdateOne {
	snuo.mutation.ClearScan()
	return snuo
}

// Where appends a list predicates to the ScanNotifyUpdate builder.
func (snuo *ScanNotifyUpdateOne) Where(ps ...predicate.ScanNotify) *ScanNotifyUpdateOne {
	snuo.mutation.Where(ps...)
	return snuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (snuo *ScanNotifyUpdateOne) Select(field string, fields ...string) *ScanNotifyUpdateOne {
	snuo.fields = append([]string{field}, fields...)
	return snuo
}

// Save executes the query and returns the updated ScanNotify entity.
func (snuo *ScanNotifyUpdateOne) Save(ctx context.Context) (*ScanNotify, error) {
	snuo.defaults()
	return withHooks(ctx, snuo.sqlSave, snuo.mutation, snuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (snuo *ScanNotifyUpdateOne) SaveX(ctx context.Context) *ScanNotify {
	node, err := snuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (snuo *ScanNotifyUpdateOne) Exec(ctx context.Context) error {
	_, err := snuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (snuo *ScanNotifyUpdateOne) ExecX(ctx context.Context) {
	if err := snuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (snuo *ScanNotifyUpdateOne) defaults() {
	if _, ok := snuo.mutation.UpdatedAt(); !ok {
		v := scannotify.UpdateDefaultUpdatedAt()
		snuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (snuo *ScanNotifyUpdateOne) check() error {
	if v, ok := snuo.mutation.Hash(); ok {
		if err := scannotify.HashValidator(v); err != nil {
			return &ValidationError{Name: "hash", err: fmt.Errorf(`ent: validator failed for field "ScanNotify.hash": %w`, err)}
		}
	}
	if snuo.mutation.ScanCleared() && len(snuo.mutation.ScanIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ScanNotify.scan"`)
	}
	return nil
}

func (snuo *ScanNotifyUpdateOne) sqlSave(ctx context.Context) (_node *ScanNotify, err error) {
	if err := snuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(scannotify.Table, scannotify.Columns, sqlgraph.NewFieldSpec(scannotify.FieldID, field.TypeUUID))
	id, ok := snuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ScanNotify.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := snuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, scannotify.FieldID)
		for _, f := range fields {
			if !scannotify.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != scannotify.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := snuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := snuo.mutation.Hash(); ok {
		_spec.SetField(scannotify.FieldHash, field.TypeString, value)
	}
	if value, ok := snuo.mutation.Status(); ok {
		_spec.SetField(scannotify.FieldStatus, field.TypeString, value)
	}
	if value, ok := snuo.mutation.UpdatedAt(); ok {
		_spec.SetField(scannotify.FieldUpdatedAt, field.TypeTime, value)
	}
	if snuo.mutation.ScanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scannotify.ScanTable,
			Columns: []string{scannotify.ScanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scans.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := snuo.mutation.ScanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scannotify.ScanTable,
			Columns: []string{scannotify.ScanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scans.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ScanNotify{config: snuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, snuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scannotify.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	snuo.mutation.done = true
	return _node, nil
}
