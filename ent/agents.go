// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/shinobistack/gokakashi/ent/agents"
)

// Agents is the model entity for the Agents schema.
type Agents struct {
	config `json:"-"`
	// ID of the ent.
	// Primary key, unique identifier.
	ID int `json:"id,omitempty"`
	// Enum: { connected, in_progress, disconnected }.
	Status string `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AgentsQuery when eager-loading is set.
	Edges        AgentsEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AgentsEdges holds the relations/edges for other nodes in the graph.
type AgentsEdges struct {
	// An agent can have multiple tasks.
	AgentTasks []*AgentTasks `json:"agent_tasks,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// AgentTasksOrErr returns the AgentTasks value or an error if the edge
// was not loaded in eager-loading.
func (e AgentsEdges) AgentTasksOrErr() ([]*AgentTasks, error) {
	if e.loadedTypes[0] {
		return e.AgentTasks, nil
	}
	return nil, &NotLoadedError{edge: "agent_tasks"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Agents) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case agents.FieldID:
			values[i] = new(sql.NullInt64)
		case agents.FieldStatus:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Agents fields.
func (a *Agents) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case agents.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case agents.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				a.Status = value.String
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Agents.
// This includes values selected through modifiers, order, etc.
func (a *Agents) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// QueryAgentTasks queries the "agent_tasks" edge of the Agents entity.
func (a *Agents) QueryAgentTasks() *AgentTasksQuery {
	return NewAgentsClient(a.config).QueryAgentTasks(a)
}

// Update returns a builder for updating this Agents.
// Note that you need to call Agents.Unwrap() before calling this method if this Agents
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Agents) Update() *AgentsUpdateOne {
	return NewAgentsClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Agents entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Agents) Unwrap() *Agents {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Agents is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Agents) String() string {
	var builder strings.Builder
	builder.WriteString("Agents(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("status=")
	builder.WriteString(a.Status)
	builder.WriteByte(')')
	return builder.String()
}

// AgentsSlice is a parsable slice of Agents.
type AgentsSlice []*Agents
