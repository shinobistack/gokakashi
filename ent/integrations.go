// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/shinobistack/gokakashi/ent/integrations"
)

// Integrations is the model entity for the Integrations schema.
type Integrations struct {
	config `json:"-"`
	// ID of the ent.
	// UUID for unique identification
	ID uuid.UUID `json:"id,omitempty"`
	// Integration name
	Name string `json:"name,omitempty"`
	// Foreign key to IntegrationType.id
	Type string `json:"type,omitempty"`
	// Integrations Configurations stored as JSONB
	Config                        map[string]interface{} `json:"config,omitempty"`
	integration_type_integrations *string
	selectValues                  sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Integrations) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case integrations.FieldConfig:
			values[i] = new([]byte)
		case integrations.FieldName, integrations.FieldType:
			values[i] = new(sql.NullString)
		case integrations.FieldID:
			values[i] = new(uuid.UUID)
		case integrations.ForeignKeys[0]: // integration_type_integrations
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Integrations fields.
func (i *Integrations) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case integrations.FieldID:
			if value, ok := values[j].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[j])
			} else if value != nil {
				i.ID = *value
			}
		case integrations.FieldName:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[j])
			} else if value.Valid {
				i.Name = value.String
			}
		case integrations.FieldType:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[j])
			} else if value.Valid {
				i.Type = value.String
			}
		case integrations.FieldConfig:
			if value, ok := values[j].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field config", values[j])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &i.Config); err != nil {
					return fmt.Errorf("unmarshal field config: %w", err)
				}
			}
		case integrations.ForeignKeys[0]:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field integration_type_integrations", values[j])
			} else if value.Valid {
				i.integration_type_integrations = new(string)
				*i.integration_type_integrations = value.String
			}
		default:
			i.selectValues.Set(columns[j], values[j])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Integrations.
// This includes values selected through modifiers, order, etc.
func (i *Integrations) Value(name string) (ent.Value, error) {
	return i.selectValues.Get(name)
}

// Update returns a builder for updating this Integrations.
// Note that you need to call Integrations.Unwrap() before calling this method if this Integrations
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Integrations) Update() *IntegrationsUpdateOne {
	return NewIntegrationsClient(i.config).UpdateOne(i)
}

// Unwrap unwraps the Integrations entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *Integrations) Unwrap() *Integrations {
	_tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: Integrations is not a transactional entity")
	}
	i.config.driver = _tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Integrations) String() string {
	var builder strings.Builder
	builder.WriteString("Integrations(")
	builder.WriteString(fmt.Sprintf("id=%v, ", i.ID))
	builder.WriteString("name=")
	builder.WriteString(i.Name)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(i.Type)
	builder.WriteString(", ")
	builder.WriteString("config=")
	builder.WriteString(fmt.Sprintf("%v", i.Config))
	builder.WriteByte(')')
	return builder.String()
}

// IntegrationsSlice is a parsable slice of Integrations.
type IntegrationsSlice []*Integrations
