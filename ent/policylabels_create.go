// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/shinobistack/gokakashi/ent/policies"
	"github.com/shinobistack/gokakashi/ent/policylabels"
)

// PolicyLabelsCreate is the builder for creating a PolicyLabels entity.
type PolicyLabelsCreate struct {
	config
	mutation *PolicyLabelsMutation
	hooks    []Hook
}

// SetPolicyID sets the "policy_id" field.
func (plc *PolicyLabelsCreate) SetPolicyID(u uuid.UUID) *PolicyLabelsCreate {
	plc.mutation.SetPolicyID(u)
	return plc
}

// SetKey sets the "key" field.
func (plc *PolicyLabelsCreate) SetKey(s string) *PolicyLabelsCreate {
	plc.mutation.SetKey(s)
	return plc
}

// SetValue sets the "value" field.
func (plc *PolicyLabelsCreate) SetValue(s string) *PolicyLabelsCreate {
	plc.mutation.SetValue(s)
	return plc
}

// SetPolicy sets the "policy" edge to the Policies entity.
func (plc *PolicyLabelsCreate) SetPolicy(p *Policies) *PolicyLabelsCreate {
	return plc.SetPolicyID(p.ID)
}

// Mutation returns the PolicyLabelsMutation object of the builder.
func (plc *PolicyLabelsCreate) Mutation() *PolicyLabelsMutation {
	return plc.mutation
}

// Save creates the PolicyLabels in the database.
func (plc *PolicyLabelsCreate) Save(ctx context.Context) (*PolicyLabels, error) {
	return withHooks(ctx, plc.sqlSave, plc.mutation, plc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (plc *PolicyLabelsCreate) SaveX(ctx context.Context) *PolicyLabels {
	v, err := plc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (plc *PolicyLabelsCreate) Exec(ctx context.Context) error {
	_, err := plc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (plc *PolicyLabelsCreate) ExecX(ctx context.Context) {
	if err := plc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (plc *PolicyLabelsCreate) check() error {
	if _, ok := plc.mutation.PolicyID(); !ok {
		return &ValidationError{Name: "policy_id", err: errors.New(`ent: missing required field "PolicyLabels.policy_id"`)}
	}
	if _, ok := plc.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`ent: missing required field "PolicyLabels.key"`)}
	}
	if v, ok := plc.mutation.Key(); ok {
		if err := policylabels.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`ent: validator failed for field "PolicyLabels.key": %w`, err)}
		}
	}
	if _, ok := plc.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`ent: missing required field "PolicyLabels.value"`)}
	}
	if v, ok := plc.mutation.Value(); ok {
		if err := policylabels.ValueValidator(v); err != nil {
			return &ValidationError{Name: "value", err: fmt.Errorf(`ent: validator failed for field "PolicyLabels.value": %w`, err)}
		}
	}
	if len(plc.mutation.PolicyIDs()) == 0 {
		return &ValidationError{Name: "policy", err: errors.New(`ent: missing required edge "PolicyLabels.policy"`)}
	}
	return nil
}

func (plc *PolicyLabelsCreate) sqlSave(ctx context.Context) (*PolicyLabels, error) {
	if err := plc.check(); err != nil {
		return nil, err
	}
	_node, _spec := plc.createSpec()
	if err := sqlgraph.CreateNode(ctx, plc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	plc.mutation.id = &_node.ID
	plc.mutation.done = true
	return _node, nil
}

func (plc *PolicyLabelsCreate) createSpec() (*PolicyLabels, *sqlgraph.CreateSpec) {
	var (
		_node = &PolicyLabels{config: plc.config}
		_spec = sqlgraph.NewCreateSpec(policylabels.Table, sqlgraph.NewFieldSpec(policylabels.FieldID, field.TypeInt))
	)
	if value, ok := plc.mutation.Key(); ok {
		_spec.SetField(policylabels.FieldKey, field.TypeString, value)
		_node.Key = value
	}
	if value, ok := plc.mutation.Value(); ok {
		_spec.SetField(policylabels.FieldValue, field.TypeString, value)
		_node.Value = value
	}
	if nodes := plc.mutation.PolicyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   policylabels.PolicyTable,
			Columns: []string{policylabels.PolicyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(policies.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PolicyID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PolicyLabelsCreateBulk is the builder for creating many PolicyLabels entities in bulk.
type PolicyLabelsCreateBulk struct {
	config
	err      error
	builders []*PolicyLabelsCreate
}

// Save creates the PolicyLabels entities in the database.
func (plcb *PolicyLabelsCreateBulk) Save(ctx context.Context) ([]*PolicyLabels, error) {
	if plcb.err != nil {
		return nil, plcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(plcb.builders))
	nodes := make([]*PolicyLabels, len(plcb.builders))
	mutators := make([]Mutator, len(plcb.builders))
	for i := range plcb.builders {
		func(i int, root context.Context) {
			builder := plcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PolicyLabelsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, plcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, plcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, plcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (plcb *PolicyLabelsCreateBulk) SaveX(ctx context.Context) []*PolicyLabels {
	v, err := plcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (plcb *PolicyLabelsCreateBulk) Exec(ctx context.Context) error {
	_, err := plcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (plcb *PolicyLabelsCreateBulk) ExecX(ctx context.Context) {
	if err := plcb.Exec(ctx); err != nil {
		panic(err)
	}
}
