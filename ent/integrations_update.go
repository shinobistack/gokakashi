// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/shinobistack/gokakashi/ent/integrations"
	"github.com/shinobistack/gokakashi/ent/predicate"
	"github.com/shinobistack/gokakashi/ent/scans"
)

// IntegrationsUpdate is the builder for updating Integrations entities.
type IntegrationsUpdate struct {
	config
	hooks    []Hook
	mutation *IntegrationsMutation
}

// Where appends a list predicates to the IntegrationsUpdate builder.
func (iu *IntegrationsUpdate) Where(ps ...predicate.Integrations) *IntegrationsUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetName sets the "name" field.
func (iu *IntegrationsUpdate) SetName(s string) *IntegrationsUpdate {
	iu.mutation.SetName(s)
	return iu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (iu *IntegrationsUpdate) SetNillableName(s *string) *IntegrationsUpdate {
	if s != nil {
		iu.SetName(*s)
	}
	return iu
}

// SetType sets the "type" field.
func (iu *IntegrationsUpdate) SetType(s string) *IntegrationsUpdate {
	iu.mutation.SetType(s)
	return iu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (iu *IntegrationsUpdate) SetNillableType(s *string) *IntegrationsUpdate {
	if s != nil {
		iu.SetType(*s)
	}
	return iu
}

// SetConfig sets the "config" field.
func (iu *IntegrationsUpdate) SetConfig(m map[string]interface{}) *IntegrationsUpdate {
	iu.mutation.SetConfig(m)
	return iu
}

// AddScanIDs adds the "scans" edge to the Scans entity by IDs.
func (iu *IntegrationsUpdate) AddScanIDs(ids ...uuid.UUID) *IntegrationsUpdate {
	iu.mutation.AddScanIDs(ids...)
	return iu
}

// AddScans adds the "scans" edges to the Scans entity.
func (iu *IntegrationsUpdate) AddScans(s ...*Scans) *IntegrationsUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return iu.AddScanIDs(ids...)
}

// Mutation returns the IntegrationsMutation object of the builder.
func (iu *IntegrationsUpdate) Mutation() *IntegrationsMutation {
	return iu.mutation
}

// ClearScans clears all "scans" edges to the Scans entity.
func (iu *IntegrationsUpdate) ClearScans() *IntegrationsUpdate {
	iu.mutation.ClearScans()
	return iu
}

// RemoveScanIDs removes the "scans" edge to Scans entities by IDs.
func (iu *IntegrationsUpdate) RemoveScanIDs(ids ...uuid.UUID) *IntegrationsUpdate {
	iu.mutation.RemoveScanIDs(ids...)
	return iu
}

// RemoveScans removes "scans" edges to Scans entities.
func (iu *IntegrationsUpdate) RemoveScans(s ...*Scans) *IntegrationsUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return iu.RemoveScanIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *IntegrationsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, iu.sqlSave, iu.mutation, iu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iu *IntegrationsUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *IntegrationsUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *IntegrationsUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iu *IntegrationsUpdate) check() error {
	if v, ok := iu.mutation.Name(); ok {
		if err := integrations.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Integrations.name": %w`, err)}
		}
	}
	if v, ok := iu.mutation.GetType(); ok {
		if err := integrations.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Integrations.type": %w`, err)}
		}
	}
	return nil
}

func (iu *IntegrationsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := iu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(integrations.Table, integrations.Columns, sqlgraph.NewFieldSpec(integrations.FieldID, field.TypeUUID))
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.Name(); ok {
		_spec.SetField(integrations.FieldName, field.TypeString, value)
	}
	if value, ok := iu.mutation.GetType(); ok {
		_spec.SetField(integrations.FieldType, field.TypeString, value)
	}
	if value, ok := iu.mutation.Config(); ok {
		_spec.SetField(integrations.FieldConfig, field.TypeJSON, value)
	}
	if iu.mutation.ScansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   integrations.ScansTable,
			Columns: []string{integrations.ScansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scans.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.RemovedScansIDs(); len(nodes) > 0 && !iu.mutation.ScansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   integrations.ScansTable,
			Columns: []string{integrations.ScansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scans.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.ScansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   integrations.ScansTable,
			Columns: []string{integrations.ScansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scans.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{integrations.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iu.mutation.done = true
	return n, nil
}

// IntegrationsUpdateOne is the builder for updating a single Integrations entity.
type IntegrationsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *IntegrationsMutation
}

// SetName sets the "name" field.
func (iuo *IntegrationsUpdateOne) SetName(s string) *IntegrationsUpdateOne {
	iuo.mutation.SetName(s)
	return iuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (iuo *IntegrationsUpdateOne) SetNillableName(s *string) *IntegrationsUpdateOne {
	if s != nil {
		iuo.SetName(*s)
	}
	return iuo
}

// SetType sets the "type" field.
func (iuo *IntegrationsUpdateOne) SetType(s string) *IntegrationsUpdateOne {
	iuo.mutation.SetType(s)
	return iuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (iuo *IntegrationsUpdateOne) SetNillableType(s *string) *IntegrationsUpdateOne {
	if s != nil {
		iuo.SetType(*s)
	}
	return iuo
}

// SetConfig sets the "config" field.
func (iuo *IntegrationsUpdateOne) SetConfig(m map[string]interface{}) *IntegrationsUpdateOne {
	iuo.mutation.SetConfig(m)
	return iuo
}

// AddScanIDs adds the "scans" edge to the Scans entity by IDs.
func (iuo *IntegrationsUpdateOne) AddScanIDs(ids ...uuid.UUID) *IntegrationsUpdateOne {
	iuo.mutation.AddScanIDs(ids...)
	return iuo
}

// AddScans adds the "scans" edges to the Scans entity.
func (iuo *IntegrationsUpdateOne) AddScans(s ...*Scans) *IntegrationsUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return iuo.AddScanIDs(ids...)
}

// Mutation returns the IntegrationsMutation object of the builder.
func (iuo *IntegrationsUpdateOne) Mutation() *IntegrationsMutation {
	return iuo.mutation
}

// ClearScans clears all "scans" edges to the Scans entity.
func (iuo *IntegrationsUpdateOne) ClearScans() *IntegrationsUpdateOne {
	iuo.mutation.ClearScans()
	return iuo
}

// RemoveScanIDs removes the "scans" edge to Scans entities by IDs.
func (iuo *IntegrationsUpdateOne) RemoveScanIDs(ids ...uuid.UUID) *IntegrationsUpdateOne {
	iuo.mutation.RemoveScanIDs(ids...)
	return iuo
}

// RemoveScans removes "scans" edges to Scans entities.
func (iuo *IntegrationsUpdateOne) RemoveScans(s ...*Scans) *IntegrationsUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return iuo.RemoveScanIDs(ids...)
}

// Where appends a list predicates to the IntegrationsUpdate builder.
func (iuo *IntegrationsUpdateOne) Where(ps ...predicate.Integrations) *IntegrationsUpdateOne {
	iuo.mutation.Where(ps...)
	return iuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *IntegrationsUpdateOne) Select(field string, fields ...string) *IntegrationsUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Integrations entity.
func (iuo *IntegrationsUpdateOne) Save(ctx context.Context) (*Integrations, error) {
	return withHooks(ctx, iuo.sqlSave, iuo.mutation, iuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *IntegrationsUpdateOne) SaveX(ctx context.Context) *Integrations {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *IntegrationsUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *IntegrationsUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iuo *IntegrationsUpdateOne) check() error {
	if v, ok := iuo.mutation.Name(); ok {
		if err := integrations.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Integrations.name": %w`, err)}
		}
	}
	if v, ok := iuo.mutation.GetType(); ok {
		if err := integrations.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Integrations.type": %w`, err)}
		}
	}
	return nil
}

func (iuo *IntegrationsUpdateOne) sqlSave(ctx context.Context) (_node *Integrations, err error) {
	if err := iuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(integrations.Table, integrations.Columns, sqlgraph.NewFieldSpec(integrations.FieldID, field.TypeUUID))
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Integrations.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, integrations.FieldID)
		for _, f := range fields {
			if !integrations.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != integrations.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.Name(); ok {
		_spec.SetField(integrations.FieldName, field.TypeString, value)
	}
	if value, ok := iuo.mutation.GetType(); ok {
		_spec.SetField(integrations.FieldType, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Config(); ok {
		_spec.SetField(integrations.FieldConfig, field.TypeJSON, value)
	}
	if iuo.mutation.ScansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   integrations.ScansTable,
			Columns: []string{integrations.ScansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scans.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.RemovedScansIDs(); len(nodes) > 0 && !iuo.mutation.ScansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   integrations.ScansTable,
			Columns: []string{integrations.ScansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scans.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.ScansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   integrations.ScansTable,
			Columns: []string{integrations.ScansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scans.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Integrations{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{integrations.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iuo.mutation.done = true
	return _node, nil
}
