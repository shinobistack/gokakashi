// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/shinobistack/gokakashi/ent/v2agents"
)

// V2Agents is the model entity for the V2Agents schema.
type V2Agents struct {
	config `json:"-"`
	// ID of the ent.
	// Primary key
	ID uuid.UUID `json:"id,omitempty"`
	// Enum: connected, scan_in_progress, disconnected
	Status string `json:"status,omitempty"`
	// Timestamp of the agent's liveliness.
	LastHeartbeatAt time.Time `json:"last_heartbeat_at,omitempty"`
	// Timestamp of the agent's creation.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Timestamp of the agent's last update.
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*V2Agents) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case v2agents.FieldStatus:
			values[i] = new(sql.NullString)
		case v2agents.FieldLastHeartbeatAt, v2agents.FieldCreatedAt, v2agents.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case v2agents.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the V2Agents fields.
func (v *V2Agents) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case v2agents.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				v.ID = *value
			}
		case v2agents.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				v.Status = value.String
			}
		case v2agents.FieldLastHeartbeatAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_heartbeat_at", values[i])
			} else if value.Valid {
				v.LastHeartbeatAt = value.Time
			}
		case v2agents.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				v.CreatedAt = value.Time
			}
		case v2agents.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				v.UpdatedAt = value.Time
			}
		default:
			v.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the V2Agents.
// This includes values selected through modifiers, order, etc.
func (v *V2Agents) Value(name string) (ent.Value, error) {
	return v.selectValues.Get(name)
}

// Update returns a builder for updating this V2Agents.
// Note that you need to call V2Agents.Unwrap() before calling this method if this V2Agents
// was returned from a transaction, and the transaction was committed or rolled back.
func (v *V2Agents) Update() *V2AgentsUpdateOne {
	return NewV2AgentsClient(v.config).UpdateOne(v)
}

// Unwrap unwraps the V2Agents entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (v *V2Agents) Unwrap() *V2Agents {
	_tx, ok := v.config.driver.(*txDriver)
	if !ok {
		panic("ent: V2Agents is not a transactional entity")
	}
	v.config.driver = _tx.drv
	return v
}

// String implements the fmt.Stringer.
func (v *V2Agents) String() string {
	var builder strings.Builder
	builder.WriteString("V2Agents(")
	builder.WriteString(fmt.Sprintf("id=%v, ", v.ID))
	builder.WriteString("status=")
	builder.WriteString(v.Status)
	builder.WriteString(", ")
	builder.WriteString("last_heartbeat_at=")
	builder.WriteString(v.LastHeartbeatAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(v.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(v.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// V2AgentsSlice is a parsable slice of V2Agents.
type V2AgentsSlice []*V2Agents
