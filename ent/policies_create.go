// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/shinobistack/gokakashi/ent/policies"
	"github.com/shinobistack/gokakashi/ent/policylabels"
	"github.com/shinobistack/gokakashi/ent/schema"
)

// PoliciesCreate is the builder for creating a Policies entity.
type PoliciesCreate struct {
	config
	mutation *PoliciesMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (pc *PoliciesCreate) SetName(s string) *PoliciesCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetImage sets the "image" field.
func (pc *PoliciesCreate) SetImage(s schema.Image) *PoliciesCreate {
	pc.mutation.SetImage(s)
	return pc
}

// SetLabels sets the "labels" field.
func (pc *PoliciesCreate) SetLabels(sl schema.PolicyLabels) *PoliciesCreate {
	pc.mutation.SetLabels(sl)
	return pc
}

// SetNillableLabels sets the "labels" field if the given value is not nil.
func (pc *PoliciesCreate) SetNillableLabels(sl *schema.PolicyLabels) *PoliciesCreate {
	if sl != nil {
		pc.SetLabels(*sl)
	}
	return pc
}

// SetTrigger sets the "trigger" field.
func (pc *PoliciesCreate) SetTrigger(m map[string]interface{}) *PoliciesCreate {
	pc.mutation.SetTrigger(m)
	return pc
}

// SetCheck sets the "check" field.
func (pc *PoliciesCreate) SetCheck(s schema.Check) *PoliciesCreate {
	pc.mutation.SetCheck(s)
	return pc
}

// SetNillableCheck sets the "check" field if the given value is not nil.
func (pc *PoliciesCreate) SetNillableCheck(s *schema.Check) *PoliciesCreate {
	if s != nil {
		pc.SetCheck(*s)
	}
	return pc
}

// SetID sets the "id" field.
func (pc *PoliciesCreate) SetID(u uuid.UUID) *PoliciesCreate {
	pc.mutation.SetID(u)
	return pc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pc *PoliciesCreate) SetNillableID(u *uuid.UUID) *PoliciesCreate {
	if u != nil {
		pc.SetID(*u)
	}
	return pc
}

// AddPolicyLabelIDs adds the "policy_labels" edge to the PolicyLabels entity by IDs.
func (pc *PoliciesCreate) AddPolicyLabelIDs(ids ...int) *PoliciesCreate {
	pc.mutation.AddPolicyLabelIDs(ids...)
	return pc
}

// AddPolicyLabels adds the "policy_labels" edges to the PolicyLabels entity.
func (pc *PoliciesCreate) AddPolicyLabels(p ...*PolicyLabels) *PoliciesCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddPolicyLabelIDs(ids...)
}

// Mutation returns the PoliciesMutation object of the builder.
func (pc *PoliciesCreate) Mutation() *PoliciesMutation {
	return pc.mutation
}

// Save creates the Policies in the database.
func (pc *PoliciesCreate) Save(ctx context.Context) (*Policies, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PoliciesCreate) SaveX(ctx context.Context) *Policies {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PoliciesCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PoliciesCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PoliciesCreate) defaults() {
	if _, ok := pc.mutation.ID(); !ok {
		v := policies.DefaultID()
		pc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PoliciesCreate) check() error {
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Policies.name"`)}
	}
	if v, ok := pc.mutation.Name(); ok {
		if err := policies.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Policies.name": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Image(); !ok {
		return &ValidationError{Name: "image", err: errors.New(`ent: missing required field "Policies.image"`)}
	}
	return nil
}

func (pc *PoliciesCreate) sqlSave(ctx context.Context) (*Policies, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PoliciesCreate) createSpec() (*Policies, *sqlgraph.CreateSpec) {
	var (
		_node = &Policies{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(policies.Table, sqlgraph.NewFieldSpec(policies.FieldID, field.TypeUUID))
	)
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.SetField(policies.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pc.mutation.Image(); ok {
		_spec.SetField(policies.FieldImage, field.TypeJSON, value)
		_node.Image = value
	}
	if value, ok := pc.mutation.Labels(); ok {
		_spec.SetField(policies.FieldLabels, field.TypeJSON, value)
		_node.Labels = value
	}
	if value, ok := pc.mutation.Trigger(); ok {
		_spec.SetField(policies.FieldTrigger, field.TypeJSON, value)
		_node.Trigger = value
	}
	if value, ok := pc.mutation.Check(); ok {
		_spec.SetField(policies.FieldCheck, field.TypeJSON, value)
		_node.Check = value
	}
	if nodes := pc.mutation.PolicyLabelsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   policies.PolicyLabelsTable,
			Columns: []string{policies.PolicyLabelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(policylabels.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PoliciesCreateBulk is the builder for creating many Policies entities in bulk.
type PoliciesCreateBulk struct {
	config
	err      error
	builders []*PoliciesCreate
}

// Save creates the Policies entities in the database.
func (pcb *PoliciesCreateBulk) Save(ctx context.Context) ([]*Policies, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Policies, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PoliciesMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PoliciesCreateBulk) SaveX(ctx context.Context) []*Policies {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PoliciesCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PoliciesCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
