// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/shinobistack/gokakashi/ent/predicate"
	"github.com/shinobistack/gokakashi/ent/scanpolicy"
)

// ScanPolicyUpdate is the builder for updating ScanPolicy entities.
type ScanPolicyUpdate struct {
	config
	hooks    []Hook
	mutation *ScanPolicyMutation
}

// Where appends a list predicates to the ScanPolicyUpdate builder.
func (spu *ScanPolicyUpdate) Where(ps ...predicate.ScanPolicy) *ScanPolicyUpdate {
	spu.mutation.Where(ps...)
	return spu
}

// SetName sets the "name" field.
func (spu *ScanPolicyUpdate) SetName(s string) *ScanPolicyUpdate {
	spu.mutation.SetName(s)
	return spu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (spu *ScanPolicyUpdate) SetNillableName(s *string) *ScanPolicyUpdate {
	if s != nil {
		spu.SetName(*s)
	}
	return spu
}

// SetTriggerType sets the "trigger_type" field.
func (spu *ScanPolicyUpdate) SetTriggerType(s string) *ScanPolicyUpdate {
	spu.mutation.SetTriggerType(s)
	return spu
}

// SetNillableTriggerType sets the "trigger_type" field if the given value is not nil.
func (spu *ScanPolicyUpdate) SetNillableTriggerType(s *string) *ScanPolicyUpdate {
	if s != nil {
		spu.SetTriggerType(*s)
	}
	return spu
}

// Mutation returns the ScanPolicyMutation object of the builder.
func (spu *ScanPolicyUpdate) Mutation() *ScanPolicyMutation {
	return spu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (spu *ScanPolicyUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, spu.sqlSave, spu.mutation, spu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (spu *ScanPolicyUpdate) SaveX(ctx context.Context) int {
	affected, err := spu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (spu *ScanPolicyUpdate) Exec(ctx context.Context) error {
	_, err := spu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spu *ScanPolicyUpdate) ExecX(ctx context.Context) {
	if err := spu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (spu *ScanPolicyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(scanpolicy.Table, scanpolicy.Columns, sqlgraph.NewFieldSpec(scanpolicy.FieldID, field.TypeInt))
	if ps := spu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := spu.mutation.Name(); ok {
		_spec.SetField(scanpolicy.FieldName, field.TypeString, value)
	}
	if value, ok := spu.mutation.TriggerType(); ok {
		_spec.SetField(scanpolicy.FieldTriggerType, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, spu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scanpolicy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	spu.mutation.done = true
	return n, nil
}

// ScanPolicyUpdateOne is the builder for updating a single ScanPolicy entity.
type ScanPolicyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ScanPolicyMutation
}

// SetName sets the "name" field.
func (spuo *ScanPolicyUpdateOne) SetName(s string) *ScanPolicyUpdateOne {
	spuo.mutation.SetName(s)
	return spuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (spuo *ScanPolicyUpdateOne) SetNillableName(s *string) *ScanPolicyUpdateOne {
	if s != nil {
		spuo.SetName(*s)
	}
	return spuo
}

// SetTriggerType sets the "trigger_type" field.
func (spuo *ScanPolicyUpdateOne) SetTriggerType(s string) *ScanPolicyUpdateOne {
	spuo.mutation.SetTriggerType(s)
	return spuo
}

// SetNillableTriggerType sets the "trigger_type" field if the given value is not nil.
func (spuo *ScanPolicyUpdateOne) SetNillableTriggerType(s *string) *ScanPolicyUpdateOne {
	if s != nil {
		spuo.SetTriggerType(*s)
	}
	return spuo
}

// Mutation returns the ScanPolicyMutation object of the builder.
func (spuo *ScanPolicyUpdateOne) Mutation() *ScanPolicyMutation {
	return spuo.mutation
}

// Where appends a list predicates to the ScanPolicyUpdate builder.
func (spuo *ScanPolicyUpdateOne) Where(ps ...predicate.ScanPolicy) *ScanPolicyUpdateOne {
	spuo.mutation.Where(ps...)
	return spuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (spuo *ScanPolicyUpdateOne) Select(field string, fields ...string) *ScanPolicyUpdateOne {
	spuo.fields = append([]string{field}, fields...)
	return spuo
}

// Save executes the query and returns the updated ScanPolicy entity.
func (spuo *ScanPolicyUpdateOne) Save(ctx context.Context) (*ScanPolicy, error) {
	return withHooks(ctx, spuo.sqlSave, spuo.mutation, spuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (spuo *ScanPolicyUpdateOne) SaveX(ctx context.Context) *ScanPolicy {
	node, err := spuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (spuo *ScanPolicyUpdateOne) Exec(ctx context.Context) error {
	_, err := spuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spuo *ScanPolicyUpdateOne) ExecX(ctx context.Context) {
	if err := spuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (spuo *ScanPolicyUpdateOne) sqlSave(ctx context.Context) (_node *ScanPolicy, err error) {
	_spec := sqlgraph.NewUpdateSpec(scanpolicy.Table, scanpolicy.Columns, sqlgraph.NewFieldSpec(scanpolicy.FieldID, field.TypeInt))
	id, ok := spuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ScanPolicy.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := spuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, scanpolicy.FieldID)
		for _, f := range fields {
			if !scanpolicy.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != scanpolicy.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := spuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := spuo.mutation.Name(); ok {
		_spec.SetField(scanpolicy.FieldName, field.TypeString, value)
	}
	if value, ok := spuo.mutation.TriggerType(); ok {
		_spec.SetField(scanpolicy.FieldTriggerType, field.TypeString, value)
	}
	_node = &ScanPolicy{config: spuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, spuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scanpolicy.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	spuo.mutation.done = true
	return _node, nil
}
