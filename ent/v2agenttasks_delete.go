// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/shinobistack/gokakashi/ent/predicate"
	"github.com/shinobistack/gokakashi/ent/v2agenttasks"
)

// V2AgentTasksDelete is the builder for deleting a V2AgentTasks entity.
type V2AgentTasksDelete struct {
	config
	hooks    []Hook
	mutation *V2AgentTasksMutation
}

// Where appends a list predicates to the V2AgentTasksDelete builder.
func (vtd *V2AgentTasksDelete) Where(ps ...predicate.V2AgentTasks) *V2AgentTasksDelete {
	vtd.mutation.Where(ps...)
	return vtd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (vtd *V2AgentTasksDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, vtd.sqlExec, vtd.mutation, vtd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (vtd *V2AgentTasksDelete) ExecX(ctx context.Context) int {
	n, err := vtd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (vtd *V2AgentTasksDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(v2agenttasks.Table, sqlgraph.NewFieldSpec(v2agenttasks.FieldID, field.TypeUUID))
	if ps := vtd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, vtd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	vtd.mutation.done = true
	return affected, err
}

// V2AgentTasksDeleteOne is the builder for deleting a single V2AgentTasks entity.
type V2AgentTasksDeleteOne struct {
	vtd *V2AgentTasksDelete
}

// Where appends a list predicates to the V2AgentTasksDelete builder.
func (vtdo *V2AgentTasksDeleteOne) Where(ps ...predicate.V2AgentTasks) *V2AgentTasksDeleteOne {
	vtdo.vtd.mutation.Where(ps...)
	return vtdo
}

// Exec executes the deletion query.
func (vtdo *V2AgentTasksDeleteOne) Exec(ctx context.Context) error {
	n, err := vtdo.vtd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{v2agenttasks.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (vtdo *V2AgentTasksDeleteOne) ExecX(ctx context.Context) {
	if err := vtdo.Exec(ctx); err != nil {
		panic(err)
	}
}
