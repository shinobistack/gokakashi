// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/shinobistack/gokakashi/ent/integrations"
	"github.com/shinobistack/gokakashi/ent/integrationtype"
	"github.com/shinobistack/gokakashi/ent/predicate"
)

// IntegrationTypeUpdate is the builder for updating IntegrationType entities.
type IntegrationTypeUpdate struct {
	config
	hooks    []Hook
	mutation *IntegrationTypeMutation
}

// Where appends a list predicates to the IntegrationTypeUpdate builder.
func (itu *IntegrationTypeUpdate) Where(ps ...predicate.IntegrationType) *IntegrationTypeUpdate {
	itu.mutation.Where(ps...)
	return itu
}

// SetDisplayName sets the "display_name" field.
func (itu *IntegrationTypeUpdate) SetDisplayName(s string) *IntegrationTypeUpdate {
	itu.mutation.SetDisplayName(s)
	return itu
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (itu *IntegrationTypeUpdate) SetNillableDisplayName(s *string) *IntegrationTypeUpdate {
	if s != nil {
		itu.SetDisplayName(*s)
	}
	return itu
}

// AddIntegrationIDs adds the "integrations" edge to the Integrations entity by IDs.
func (itu *IntegrationTypeUpdate) AddIntegrationIDs(ids ...uuid.UUID) *IntegrationTypeUpdate {
	itu.mutation.AddIntegrationIDs(ids...)
	return itu
}

// AddIntegrations adds the "integrations" edges to the Integrations entity.
func (itu *IntegrationTypeUpdate) AddIntegrations(i ...*Integrations) *IntegrationTypeUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return itu.AddIntegrationIDs(ids...)
}

// Mutation returns the IntegrationTypeMutation object of the builder.
func (itu *IntegrationTypeUpdate) Mutation() *IntegrationTypeMutation {
	return itu.mutation
}

// ClearIntegrations clears all "integrations" edges to the Integrations entity.
func (itu *IntegrationTypeUpdate) ClearIntegrations() *IntegrationTypeUpdate {
	itu.mutation.ClearIntegrations()
	return itu
}

// RemoveIntegrationIDs removes the "integrations" edge to Integrations entities by IDs.
func (itu *IntegrationTypeUpdate) RemoveIntegrationIDs(ids ...uuid.UUID) *IntegrationTypeUpdate {
	itu.mutation.RemoveIntegrationIDs(ids...)
	return itu
}

// RemoveIntegrations removes "integrations" edges to Integrations entities.
func (itu *IntegrationTypeUpdate) RemoveIntegrations(i ...*Integrations) *IntegrationTypeUpdate {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return itu.RemoveIntegrationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (itu *IntegrationTypeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, itu.sqlSave, itu.mutation, itu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (itu *IntegrationTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := itu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (itu *IntegrationTypeUpdate) Exec(ctx context.Context) error {
	_, err := itu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (itu *IntegrationTypeUpdate) ExecX(ctx context.Context) {
	if err := itu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (itu *IntegrationTypeUpdate) check() error {
	if v, ok := itu.mutation.DisplayName(); ok {
		if err := integrationtype.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "display_name", err: fmt.Errorf(`ent: validator failed for field "IntegrationType.display_name": %w`, err)}
		}
	}
	return nil
}

func (itu *IntegrationTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := itu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(integrationtype.Table, integrationtype.Columns, sqlgraph.NewFieldSpec(integrationtype.FieldID, field.TypeString))
	if ps := itu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := itu.mutation.DisplayName(); ok {
		_spec.SetField(integrationtype.FieldDisplayName, field.TypeString, value)
	}
	if itu.mutation.IntegrationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   integrationtype.IntegrationsTable,
			Columns: []string{integrationtype.IntegrationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(integrations.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := itu.mutation.RemovedIntegrationsIDs(); len(nodes) > 0 && !itu.mutation.IntegrationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   integrationtype.IntegrationsTable,
			Columns: []string{integrationtype.IntegrationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(integrations.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := itu.mutation.IntegrationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   integrationtype.IntegrationsTable,
			Columns: []string{integrationtype.IntegrationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(integrations.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, itu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{integrationtype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	itu.mutation.done = true
	return n, nil
}

// IntegrationTypeUpdateOne is the builder for updating a single IntegrationType entity.
type IntegrationTypeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *IntegrationTypeMutation
}

// SetDisplayName sets the "display_name" field.
func (ituo *IntegrationTypeUpdateOne) SetDisplayName(s string) *IntegrationTypeUpdateOne {
	ituo.mutation.SetDisplayName(s)
	return ituo
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (ituo *IntegrationTypeUpdateOne) SetNillableDisplayName(s *string) *IntegrationTypeUpdateOne {
	if s != nil {
		ituo.SetDisplayName(*s)
	}
	return ituo
}

// AddIntegrationIDs adds the "integrations" edge to the Integrations entity by IDs.
func (ituo *IntegrationTypeUpdateOne) AddIntegrationIDs(ids ...uuid.UUID) *IntegrationTypeUpdateOne {
	ituo.mutation.AddIntegrationIDs(ids...)
	return ituo
}

// AddIntegrations adds the "integrations" edges to the Integrations entity.
func (ituo *IntegrationTypeUpdateOne) AddIntegrations(i ...*Integrations) *IntegrationTypeUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ituo.AddIntegrationIDs(ids...)
}

// Mutation returns the IntegrationTypeMutation object of the builder.
func (ituo *IntegrationTypeUpdateOne) Mutation() *IntegrationTypeMutation {
	return ituo.mutation
}

// ClearIntegrations clears all "integrations" edges to the Integrations entity.
func (ituo *IntegrationTypeUpdateOne) ClearIntegrations() *IntegrationTypeUpdateOne {
	ituo.mutation.ClearIntegrations()
	return ituo
}

// RemoveIntegrationIDs removes the "integrations" edge to Integrations entities by IDs.
func (ituo *IntegrationTypeUpdateOne) RemoveIntegrationIDs(ids ...uuid.UUID) *IntegrationTypeUpdateOne {
	ituo.mutation.RemoveIntegrationIDs(ids...)
	return ituo
}

// RemoveIntegrations removes "integrations" edges to Integrations entities.
func (ituo *IntegrationTypeUpdateOne) RemoveIntegrations(i ...*Integrations) *IntegrationTypeUpdateOne {
	ids := make([]uuid.UUID, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return ituo.RemoveIntegrationIDs(ids...)
}

// Where appends a list predicates to the IntegrationTypeUpdate builder.
func (ituo *IntegrationTypeUpdateOne) Where(ps ...predicate.IntegrationType) *IntegrationTypeUpdateOne {
	ituo.mutation.Where(ps...)
	return ituo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ituo *IntegrationTypeUpdateOne) Select(field string, fields ...string) *IntegrationTypeUpdateOne {
	ituo.fields = append([]string{field}, fields...)
	return ituo
}

// Save executes the query and returns the updated IntegrationType entity.
func (ituo *IntegrationTypeUpdateOne) Save(ctx context.Context) (*IntegrationType, error) {
	return withHooks(ctx, ituo.sqlSave, ituo.mutation, ituo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ituo *IntegrationTypeUpdateOne) SaveX(ctx context.Context) *IntegrationType {
	node, err := ituo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ituo *IntegrationTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := ituo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ituo *IntegrationTypeUpdateOne) ExecX(ctx context.Context) {
	if err := ituo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ituo *IntegrationTypeUpdateOne) check() error {
	if v, ok := ituo.mutation.DisplayName(); ok {
		if err := integrationtype.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "display_name", err: fmt.Errorf(`ent: validator failed for field "IntegrationType.display_name": %w`, err)}
		}
	}
	return nil
}

func (ituo *IntegrationTypeUpdateOne) sqlSave(ctx context.Context) (_node *IntegrationType, err error) {
	if err := ituo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(integrationtype.Table, integrationtype.Columns, sqlgraph.NewFieldSpec(integrationtype.FieldID, field.TypeString))
	id, ok := ituo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "IntegrationType.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ituo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, integrationtype.FieldID)
		for _, f := range fields {
			if !integrationtype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != integrationtype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ituo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ituo.mutation.DisplayName(); ok {
		_spec.SetField(integrationtype.FieldDisplayName, field.TypeString, value)
	}
	if ituo.mutation.IntegrationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   integrationtype.IntegrationsTable,
			Columns: []string{integrationtype.IntegrationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(integrations.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ituo.mutation.RemovedIntegrationsIDs(); len(nodes) > 0 && !ituo.mutation.IntegrationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   integrationtype.IntegrationsTable,
			Columns: []string{integrationtype.IntegrationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(integrations.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ituo.mutation.IntegrationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   integrationtype.IntegrationsTable,
			Columns: []string{integrationtype.IntegrationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(integrations.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &IntegrationType{config: ituo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ituo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{integrationtype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ituo.mutation.done = true
	return _node, nil
}
