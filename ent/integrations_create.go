// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/shinobistack/gokakashi/ent/integrations"
	"github.com/shinobistack/gokakashi/ent/scans"
)

// IntegrationsCreate is the builder for creating a Integrations entity.
type IntegrationsCreate struct {
	config
	mutation *IntegrationsMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (ic *IntegrationsCreate) SetName(s string) *IntegrationsCreate {
	ic.mutation.SetName(s)
	return ic
}

// SetType sets the "type" field.
func (ic *IntegrationsCreate) SetType(s string) *IntegrationsCreate {
	ic.mutation.SetType(s)
	return ic
}

// SetConfig sets the "config" field.
func (ic *IntegrationsCreate) SetConfig(m map[string]interface{}) *IntegrationsCreate {
	ic.mutation.SetConfig(m)
	return ic
}

// SetID sets the "id" field.
func (ic *IntegrationsCreate) SetID(u uuid.UUID) *IntegrationsCreate {
	ic.mutation.SetID(u)
	return ic
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ic *IntegrationsCreate) SetNillableID(u *uuid.UUID) *IntegrationsCreate {
	if u != nil {
		ic.SetID(*u)
	}
	return ic
}

// AddScanIDs adds the "scans" edge to the Scans entity by IDs.
func (ic *IntegrationsCreate) AddScanIDs(ids ...uuid.UUID) *IntegrationsCreate {
	ic.mutation.AddScanIDs(ids...)
	return ic
}

// AddScans adds the "scans" edges to the Scans entity.
func (ic *IntegrationsCreate) AddScans(s ...*Scans) *IntegrationsCreate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ic.AddScanIDs(ids...)
}

// Mutation returns the IntegrationsMutation object of the builder.
func (ic *IntegrationsCreate) Mutation() *IntegrationsMutation {
	return ic.mutation
}

// Save creates the Integrations in the database.
func (ic *IntegrationsCreate) Save(ctx context.Context) (*Integrations, error) {
	ic.defaults()
	return withHooks(ctx, ic.sqlSave, ic.mutation, ic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ic *IntegrationsCreate) SaveX(ctx context.Context) *Integrations {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ic *IntegrationsCreate) Exec(ctx context.Context) error {
	_, err := ic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ic *IntegrationsCreate) ExecX(ctx context.Context) {
	if err := ic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ic *IntegrationsCreate) defaults() {
	if _, ok := ic.mutation.ID(); !ok {
		v := integrations.DefaultID()
		ic.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ic *IntegrationsCreate) check() error {
	if _, ok := ic.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Integrations.name"`)}
	}
	if v, ok := ic.mutation.Name(); ok {
		if err := integrations.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Integrations.name": %w`, err)}
		}
	}
	if _, ok := ic.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Integrations.type"`)}
	}
	if v, ok := ic.mutation.GetType(); ok {
		if err := integrations.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Integrations.type": %w`, err)}
		}
	}
	if _, ok := ic.mutation.Config(); !ok {
		return &ValidationError{Name: "config", err: errors.New(`ent: missing required field "Integrations.config"`)}
	}
	return nil
}

func (ic *IntegrationsCreate) sqlSave(ctx context.Context) (*Integrations, error) {
	if err := ic.check(); err != nil {
		return nil, err
	}
	_node, _spec := ic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ic.mutation.id = &_node.ID
	ic.mutation.done = true
	return _node, nil
}

func (ic *IntegrationsCreate) createSpec() (*Integrations, *sqlgraph.CreateSpec) {
	var (
		_node = &Integrations{config: ic.config}
		_spec = sqlgraph.NewCreateSpec(integrations.Table, sqlgraph.NewFieldSpec(integrations.FieldID, field.TypeUUID))
	)
	if id, ok := ic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ic.mutation.Name(); ok {
		_spec.SetField(integrations.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ic.mutation.GetType(); ok {
		_spec.SetField(integrations.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := ic.mutation.Config(); ok {
		_spec.SetField(integrations.FieldConfig, field.TypeJSON, value)
		_node.Config = value
	}
	if nodes := ic.mutation.ScansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   integrations.ScansTable,
			Columns: []string{integrations.ScansColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scans.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// IntegrationsCreateBulk is the builder for creating many Integrations entities in bulk.
type IntegrationsCreateBulk struct {
	config
	err      error
	builders []*IntegrationsCreate
}

// Save creates the Integrations entities in the database.
func (icb *IntegrationsCreateBulk) Save(ctx context.Context) ([]*Integrations, error) {
	if icb.err != nil {
		return nil, icb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(icb.builders))
	nodes := make([]*Integrations, len(icb.builders))
	mutators := make([]Mutator, len(icb.builders))
	for i := range icb.builders {
		func(i int, root context.Context) {
			builder := icb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IntegrationsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, icb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, icb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, icb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (icb *IntegrationsCreateBulk) SaveX(ctx context.Context) []*Integrations {
	v, err := icb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (icb *IntegrationsCreateBulk) Exec(ctx context.Context) error {
	_, err := icb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icb *IntegrationsCreateBulk) ExecX(ctx context.Context) {
	if err := icb.Exec(ctx); err != nil {
		panic(err)
	}
}
