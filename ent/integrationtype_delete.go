// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/shinobistack/gokakashi/ent/integrationtype"
	"github.com/shinobistack/gokakashi/ent/predicate"
)

// IntegrationTypeDelete is the builder for deleting a IntegrationType entity.
type IntegrationTypeDelete struct {
	config
	hooks    []Hook
	mutation *IntegrationTypeMutation
}

// Where appends a list predicates to the IntegrationTypeDelete builder.
func (itd *IntegrationTypeDelete) Where(ps ...predicate.IntegrationType) *IntegrationTypeDelete {
	itd.mutation.Where(ps...)
	return itd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (itd *IntegrationTypeDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, itd.sqlExec, itd.mutation, itd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (itd *IntegrationTypeDelete) ExecX(ctx context.Context) int {
	n, err := itd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (itd *IntegrationTypeDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(integrationtype.Table, sqlgraph.NewFieldSpec(integrationtype.FieldID, field.TypeString))
	if ps := itd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, itd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	itd.mutation.done = true
	return affected, err
}

// IntegrationTypeDeleteOne is the builder for deleting a single IntegrationType entity.
type IntegrationTypeDeleteOne struct {
	itd *IntegrationTypeDelete
}

// Where appends a list predicates to the IntegrationTypeDelete builder.
func (itdo *IntegrationTypeDeleteOne) Where(ps ...predicate.IntegrationType) *IntegrationTypeDeleteOne {
	itdo.itd.mutation.Where(ps...)
	return itdo
}

// Exec executes the deletion query.
func (itdo *IntegrationTypeDeleteOne) Exec(ctx context.Context) error {
	n, err := itdo.itd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{integrationtype.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (itdo *IntegrationTypeDeleteOne) ExecX(ctx context.Context) {
	if err := itdo.Exec(ctx); err != nil {
		panic(err)
	}
}
