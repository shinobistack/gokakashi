// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/shinobistack/gokakashi/ent/predicate"
	"github.com/shinobistack/gokakashi/ent/v2scans"
)

// V2ScansUpdate is the builder for updating V2Scans entities.
type V2ScansUpdate struct {
	config
	hooks    []Hook
	mutation *V2ScansMutation
}

// Where appends a list predicates to the V2ScansUpdate builder.
func (vu *V2ScansUpdate) Where(ps ...predicate.V2Scans) *V2ScansUpdate {
	vu.mutation.Where(ps...)
	return vu
}

// SetStatus sets the "status" field.
func (vu *V2ScansUpdate) SetStatus(s string) *V2ScansUpdate {
	vu.mutation.SetStatus(s)
	return vu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (vu *V2ScansUpdate) SetNillableStatus(s *string) *V2ScansUpdate {
	if s != nil {
		vu.SetStatus(*s)
	}
	return vu
}

// SetImage sets the "image" field.
func (vu *V2ScansUpdate) SetImage(s string) *V2ScansUpdate {
	vu.mutation.SetImage(s)
	return vu
}

// SetNillableImage sets the "image" field if the given value is not nil.
func (vu *V2ScansUpdate) SetNillableImage(s *string) *V2ScansUpdate {
	if s != nil {
		vu.SetImage(*s)
	}
	return vu
}

// SetLabels sets the "labels" field.
func (vu *V2ScansUpdate) SetLabels(m map[string]string) *V2ScansUpdate {
	vu.mutation.SetLabels(m)
	return vu
}

// ClearLabels clears the value of the "labels" field.
func (vu *V2ScansUpdate) ClearLabels() *V2ScansUpdate {
	vu.mutation.ClearLabels()
	return vu
}

// Mutation returns the V2ScansMutation object of the builder.
func (vu *V2ScansUpdate) Mutation() *V2ScansMutation {
	return vu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vu *V2ScansUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, vu.sqlSave, vu.mutation, vu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vu *V2ScansUpdate) SaveX(ctx context.Context) int {
	affected, err := vu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vu *V2ScansUpdate) Exec(ctx context.Context) error {
	_, err := vu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vu *V2ScansUpdate) ExecX(ctx context.Context) {
	if err := vu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vu *V2ScansUpdate) check() error {
	if v, ok := vu.mutation.Status(); ok {
		if err := v2scans.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "V2Scans.status": %w`, err)}
		}
	}
	return nil
}

func (vu *V2ScansUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := vu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(v2scans.Table, v2scans.Columns, sqlgraph.NewFieldSpec(v2scans.FieldID, field.TypeUUID))
	if ps := vu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vu.mutation.Status(); ok {
		_spec.SetField(v2scans.FieldStatus, field.TypeString, value)
	}
	if value, ok := vu.mutation.Image(); ok {
		_spec.SetField(v2scans.FieldImage, field.TypeString, value)
	}
	if value, ok := vu.mutation.Labels(); ok {
		_spec.SetField(v2scans.FieldLabels, field.TypeJSON, value)
	}
	if vu.mutation.LabelsCleared() {
		_spec.ClearField(v2scans.FieldLabels, field.TypeJSON)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{v2scans.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vu.mutation.done = true
	return n, nil
}

// V2ScansUpdateOne is the builder for updating a single V2Scans entity.
type V2ScansUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *V2ScansMutation
}

// SetStatus sets the "status" field.
func (vuo *V2ScansUpdateOne) SetStatus(s string) *V2ScansUpdateOne {
	vuo.mutation.SetStatus(s)
	return vuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (vuo *V2ScansUpdateOne) SetNillableStatus(s *string) *V2ScansUpdateOne {
	if s != nil {
		vuo.SetStatus(*s)
	}
	return vuo
}

// SetImage sets the "image" field.
func (vuo *V2ScansUpdateOne) SetImage(s string) *V2ScansUpdateOne {
	vuo.mutation.SetImage(s)
	return vuo
}

// SetNillableImage sets the "image" field if the given value is not nil.
func (vuo *V2ScansUpdateOne) SetNillableImage(s *string) *V2ScansUpdateOne {
	if s != nil {
		vuo.SetImage(*s)
	}
	return vuo
}

// SetLabels sets the "labels" field.
func (vuo *V2ScansUpdateOne) SetLabels(m map[string]string) *V2ScansUpdateOne {
	vuo.mutation.SetLabels(m)
	return vuo
}

// ClearLabels clears the value of the "labels" field.
func (vuo *V2ScansUpdateOne) ClearLabels() *V2ScansUpdateOne {
	vuo.mutation.ClearLabels()
	return vuo
}

// Mutation returns the V2ScansMutation object of the builder.
func (vuo *V2ScansUpdateOne) Mutation() *V2ScansMutation {
	return vuo.mutation
}

// Where appends a list predicates to the V2ScansUpdate builder.
func (vuo *V2ScansUpdateOne) Where(ps ...predicate.V2Scans) *V2ScansUpdateOne {
	vuo.mutation.Where(ps...)
	return vuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vuo *V2ScansUpdateOne) Select(field string, fields ...string) *V2ScansUpdateOne {
	vuo.fields = append([]string{field}, fields...)
	return vuo
}

// Save executes the query and returns the updated V2Scans entity.
func (vuo *V2ScansUpdateOne) Save(ctx context.Context) (*V2Scans, error) {
	return withHooks(ctx, vuo.sqlSave, vuo.mutation, vuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vuo *V2ScansUpdateOne) SaveX(ctx context.Context) *V2Scans {
	node, err := vuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vuo *V2ScansUpdateOne) Exec(ctx context.Context) error {
	_, err := vuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vuo *V2ScansUpdateOne) ExecX(ctx context.Context) {
	if err := vuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vuo *V2ScansUpdateOne) check() error {
	if v, ok := vuo.mutation.Status(); ok {
		if err := v2scans.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "V2Scans.status": %w`, err)}
		}
	}
	return nil
}

func (vuo *V2ScansUpdateOne) sqlSave(ctx context.Context) (_node *V2Scans, err error) {
	if err := vuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(v2scans.Table, v2scans.Columns, sqlgraph.NewFieldSpec(v2scans.FieldID, field.TypeUUID))
	id, ok := vuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "V2Scans.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, v2scans.FieldID)
		for _, f := range fields {
			if !v2scans.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != v2scans.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vuo.mutation.Status(); ok {
		_spec.SetField(v2scans.FieldStatus, field.TypeString, value)
	}
	if value, ok := vuo.mutation.Image(); ok {
		_spec.SetField(v2scans.FieldImage, field.TypeString, value)
	}
	if value, ok := vuo.mutation.Labels(); ok {
		_spec.SetField(v2scans.FieldLabels, field.TypeJSON, value)
	}
	if vuo.mutation.LabelsCleared() {
		_spec.ClearField(v2scans.FieldLabels, field.TypeJSON)
	}
	_node = &V2Scans{config: vuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{v2scans.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vuo.mutation.done = true
	return _node, nil
}
