// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/shinobistack/gokakashi/ent/agents"
	"github.com/shinobistack/gokakashi/ent/agenttasks"
	"github.com/shinobistack/gokakashi/ent/scans"
)

// AgentTasksCreate is the builder for creating a AgentTasks entity.
type AgentTasksCreate struct {
	config
	mutation *AgentTasksMutation
	hooks    []Hook
}

// SetAgentID sets the "agent_id" field.
func (atc *AgentTasksCreate) SetAgentID(i int) *AgentTasksCreate {
	atc.mutation.SetAgentID(i)
	return atc
}

// SetScanID sets the "scan_id" field.
func (atc *AgentTasksCreate) SetScanID(u uuid.UUID) *AgentTasksCreate {
	atc.mutation.SetScanID(u)
	return atc
}

// SetStatus sets the "status" field.
func (atc *AgentTasksCreate) SetStatus(s string) *AgentTasksCreate {
	atc.mutation.SetStatus(s)
	return atc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (atc *AgentTasksCreate) SetNillableStatus(s *string) *AgentTasksCreate {
	if s != nil {
		atc.SetStatus(*s)
	}
	return atc
}

// SetCreatedAt sets the "created_at" field.
func (atc *AgentTasksCreate) SetCreatedAt(t time.Time) *AgentTasksCreate {
	atc.mutation.SetCreatedAt(t)
	return atc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (atc *AgentTasksCreate) SetNillableCreatedAt(t *time.Time) *AgentTasksCreate {
	if t != nil {
		atc.SetCreatedAt(*t)
	}
	return atc
}

// SetID sets the "id" field.
func (atc *AgentTasksCreate) SetID(u uuid.UUID) *AgentTasksCreate {
	atc.mutation.SetID(u)
	return atc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (atc *AgentTasksCreate) SetNillableID(u *uuid.UUID) *AgentTasksCreate {
	if u != nil {
		atc.SetID(*u)
	}
	return atc
}

// SetAgent sets the "agent" edge to the Agents entity.
func (atc *AgentTasksCreate) SetAgent(a *Agents) *AgentTasksCreate {
	return atc.SetAgentID(a.ID)
}

// SetScan sets the "scan" edge to the Scans entity.
func (atc *AgentTasksCreate) SetScan(s *Scans) *AgentTasksCreate {
	return atc.SetScanID(s.ID)
}

// Mutation returns the AgentTasksMutation object of the builder.
func (atc *AgentTasksCreate) Mutation() *AgentTasksMutation {
	return atc.mutation
}

// Save creates the AgentTasks in the database.
func (atc *AgentTasksCreate) Save(ctx context.Context) (*AgentTasks, error) {
	atc.defaults()
	return withHooks(ctx, atc.sqlSave, atc.mutation, atc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (atc *AgentTasksCreate) SaveX(ctx context.Context) *AgentTasks {
	v, err := atc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (atc *AgentTasksCreate) Exec(ctx context.Context) error {
	_, err := atc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atc *AgentTasksCreate) ExecX(ctx context.Context) {
	if err := atc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (atc *AgentTasksCreate) defaults() {
	if _, ok := atc.mutation.Status(); !ok {
		v := agenttasks.DefaultStatus
		atc.mutation.SetStatus(v)
	}
	if _, ok := atc.mutation.CreatedAt(); !ok {
		v := agenttasks.DefaultCreatedAt()
		atc.mutation.SetCreatedAt(v)
	}
	if _, ok := atc.mutation.ID(); !ok {
		v := agenttasks.DefaultID()
		atc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (atc *AgentTasksCreate) check() error {
	if _, ok := atc.mutation.AgentID(); !ok {
		return &ValidationError{Name: "agent_id", err: errors.New(`ent: missing required field "AgentTasks.agent_id"`)}
	}
	if _, ok := atc.mutation.ScanID(); !ok {
		return &ValidationError{Name: "scan_id", err: errors.New(`ent: missing required field "AgentTasks.scan_id"`)}
	}
	if _, ok := atc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "AgentTasks.status"`)}
	}
	if _, ok := atc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "AgentTasks.created_at"`)}
	}
	if len(atc.mutation.AgentIDs()) == 0 {
		return &ValidationError{Name: "agent", err: errors.New(`ent: missing required edge "AgentTasks.agent"`)}
	}
	if len(atc.mutation.ScanIDs()) == 0 {
		return &ValidationError{Name: "scan", err: errors.New(`ent: missing required edge "AgentTasks.scan"`)}
	}
	return nil
}

func (atc *AgentTasksCreate) sqlSave(ctx context.Context) (*AgentTasks, error) {
	if err := atc.check(); err != nil {
		return nil, err
	}
	_node, _spec := atc.createSpec()
	if err := sqlgraph.CreateNode(ctx, atc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	atc.mutation.id = &_node.ID
	atc.mutation.done = true
	return _node, nil
}

func (atc *AgentTasksCreate) createSpec() (*AgentTasks, *sqlgraph.CreateSpec) {
	var (
		_node = &AgentTasks{config: atc.config}
		_spec = sqlgraph.NewCreateSpec(agenttasks.Table, sqlgraph.NewFieldSpec(agenttasks.FieldID, field.TypeUUID))
	)
	if id, ok := atc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := atc.mutation.Status(); ok {
		_spec.SetField(agenttasks.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := atc.mutation.CreatedAt(); ok {
		_spec.SetField(agenttasks.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := atc.mutation.AgentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   agenttasks.AgentTable,
			Columns: []string{agenttasks.AgentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agents.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AgentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := atc.mutation.ScanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   agenttasks.ScanTable,
			Columns: []string{agenttasks.ScanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scans.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ScanID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AgentTasksCreateBulk is the builder for creating many AgentTasks entities in bulk.
type AgentTasksCreateBulk struct {
	config
	err      error
	builders []*AgentTasksCreate
}

// Save creates the AgentTasks entities in the database.
func (atcb *AgentTasksCreateBulk) Save(ctx context.Context) ([]*AgentTasks, error) {
	if atcb.err != nil {
		return nil, atcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(atcb.builders))
	nodes := make([]*AgentTasks, len(atcb.builders))
	mutators := make([]Mutator, len(atcb.builders))
	for i := range atcb.builders {
		func(i int, root context.Context) {
			builder := atcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AgentTasksMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, atcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, atcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, atcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (atcb *AgentTasksCreateBulk) SaveX(ctx context.Context) []*AgentTasks {
	v, err := atcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (atcb *AgentTasksCreateBulk) Exec(ctx context.Context) error {
	_, err := atcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atcb *AgentTasksCreateBulk) ExecX(ctx context.Context) {
	if err := atcb.Exec(ctx); err != nil {
		panic(err)
	}
}
