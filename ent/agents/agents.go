// Code generated by ent, DO NOT EDIT.

package agents

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the agents type in the database.
	Label = "agents"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldWorkspace holds the string denoting the workspace field in the database.
	FieldWorkspace = "workspace"
	// FieldServer holds the string denoting the server field in the database.
	FieldServer = "server"
	// FieldLabels holds the string denoting the labels field in the database.
	FieldLabels = "labels"
	// FieldLastSeen holds the string denoting the last_seen field in the database.
	FieldLastSeen = "last_seen"
	// EdgeAgentTasks holds the string denoting the agent_tasks edge name in mutations.
	EdgeAgentTasks = "agent_tasks"
	// EdgeAgentLabels holds the string denoting the agent_labels edge name in mutations.
	EdgeAgentLabels = "agent_labels"
	// Table holds the table name of the agents in the database.
	Table = "agents"
	// AgentTasksTable is the table that holds the agent_tasks relation/edge.
	AgentTasksTable = "agent_tasks"
	// AgentTasksInverseTable is the table name for the AgentTasks entity.
	// It exists in this package in order to avoid circular dependency with the "agenttasks" package.
	AgentTasksInverseTable = "agent_tasks"
	// AgentTasksColumn is the table column denoting the agent_tasks relation/edge.
	AgentTasksColumn = "agent_id"
	// AgentLabelsTable is the table that holds the agent_labels relation/edge.
	AgentLabelsTable = "agent_labels"
	// AgentLabelsInverseTable is the table name for the AgentLabels entity.
	// It exists in this package in order to avoid circular dependency with the "agentlabels" package.
	AgentLabelsInverseTable = "agent_labels"
	// AgentLabelsColumn is the table column denoting the agent_labels relation/edge.
	AgentLabelsColumn = "agent_id"
)

// Columns holds all SQL columns for agents fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldStatus,
	FieldWorkspace,
	FieldServer,
	FieldLabels,
	FieldLastSeen,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus string
	// StatusValidator is a validator for the "status" field. It is called by the builders before save.
	StatusValidator func(string) error
	// DefaultLastSeen holds the default value on creation for the "last_seen" field.
	DefaultLastSeen func() time.Time
	// UpdateDefaultLastSeen holds the default value on update for the "last_seen" field.
	UpdateDefaultLastSeen func() time.Time
)

// OrderOption defines the ordering options for the Agents queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByWorkspace orders the results by the workspace field.
func ByWorkspace(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWorkspace, opts...).ToFunc()
}

// ByServer orders the results by the server field.
func ByServer(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldServer, opts...).ToFunc()
}

// ByLastSeen orders the results by the last_seen field.
func ByLastSeen(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastSeen, opts...).ToFunc()
}

// ByAgentTasksCount orders the results by agent_tasks count.
func ByAgentTasksCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAgentTasksStep(), opts...)
	}
}

// ByAgentTasks orders the results by agent_tasks terms.
func ByAgentTasks(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAgentTasksStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAgentLabelsCount orders the results by agent_labels count.
func ByAgentLabelsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAgentLabelsStep(), opts...)
	}
}

// ByAgentLabels orders the results by agent_labels terms.
func ByAgentLabels(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAgentLabelsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newAgentTasksStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AgentTasksInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AgentTasksTable, AgentTasksColumn),
	)
}
func newAgentLabelsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AgentLabelsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AgentLabelsTable, AgentLabelsColumn),
	)
}
