// Code generated by ent, DO NOT EDIT.

package agents

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/shinobistack/gokakashi/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Agents {
	return predicate.Agents(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Agents {
	return predicate.Agents(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Agents {
	return predicate.Agents(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Agents {
	return predicate.Agents(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Agents {
	return predicate.Agents(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Agents {
	return predicate.Agents(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Agents {
	return predicate.Agents(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Agents {
	return predicate.Agents(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Agents {
	return predicate.Agents(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Agents {
	return predicate.Agents(sql.FieldEQ(FieldName, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.Agents {
	return predicate.Agents(sql.FieldEQ(FieldStatus, v))
}

// Workspace applies equality check predicate on the "workspace" field. It's identical to WorkspaceEQ.
func Workspace(v string) predicate.Agents {
	return predicate.Agents(sql.FieldEQ(FieldWorkspace, v))
}

// Server applies equality check predicate on the "server" field. It's identical to ServerEQ.
func Server(v string) predicate.Agents {
	return predicate.Agents(sql.FieldEQ(FieldServer, v))
}

// LastSeen applies equality check predicate on the "last_seen" field. It's identical to LastSeenEQ.
func LastSeen(v time.Time) predicate.Agents {
	return predicate.Agents(sql.FieldEQ(FieldLastSeen, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Agents {
	return predicate.Agents(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Agents {
	return predicate.Agents(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Agents {
	return predicate.Agents(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Agents {
	return predicate.Agents(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Agents {
	return predicate.Agents(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Agents {
	return predicate.Agents(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Agents {
	return predicate.Agents(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Agents {
	return predicate.Agents(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Agents {
	return predicate.Agents(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Agents {
	return predicate.Agents(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Agents {
	return predicate.Agents(sql.FieldHasSuffix(FieldName, v))
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.Agents {
	return predicate.Agents(sql.FieldIsNull(FieldName))
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.Agents {
	return predicate.Agents(sql.FieldNotNull(FieldName))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Agents {
	return predicate.Agents(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Agents {
	return predicate.Agents(sql.FieldContainsFold(FieldName, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.Agents {
	return predicate.Agents(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.Agents {
	return predicate.Agents(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.Agents {
	return predicate.Agents(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.Agents {
	return predicate.Agents(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.Agents {
	return predicate.Agents(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.Agents {
	return predicate.Agents(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.Agents {
	return predicate.Agents(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.Agents {
	return predicate.Agents(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.Agents {
	return predicate.Agents(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.Agents {
	return predicate.Agents(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.Agents {
	return predicate.Agents(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.Agents {
	return predicate.Agents(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.Agents {
	return predicate.Agents(sql.FieldContainsFold(FieldStatus, v))
}

// WorkspaceEQ applies the EQ predicate on the "workspace" field.
func WorkspaceEQ(v string) predicate.Agents {
	return predicate.Agents(sql.FieldEQ(FieldWorkspace, v))
}

// WorkspaceNEQ applies the NEQ predicate on the "workspace" field.
func WorkspaceNEQ(v string) predicate.Agents {
	return predicate.Agents(sql.FieldNEQ(FieldWorkspace, v))
}

// WorkspaceIn applies the In predicate on the "workspace" field.
func WorkspaceIn(vs ...string) predicate.Agents {
	return predicate.Agents(sql.FieldIn(FieldWorkspace, vs...))
}

// WorkspaceNotIn applies the NotIn predicate on the "workspace" field.
func WorkspaceNotIn(vs ...string) predicate.Agents {
	return predicate.Agents(sql.FieldNotIn(FieldWorkspace, vs...))
}

// WorkspaceGT applies the GT predicate on the "workspace" field.
func WorkspaceGT(v string) predicate.Agents {
	return predicate.Agents(sql.FieldGT(FieldWorkspace, v))
}

// WorkspaceGTE applies the GTE predicate on the "workspace" field.
func WorkspaceGTE(v string) predicate.Agents {
	return predicate.Agents(sql.FieldGTE(FieldWorkspace, v))
}

// WorkspaceLT applies the LT predicate on the "workspace" field.
func WorkspaceLT(v string) predicate.Agents {
	return predicate.Agents(sql.FieldLT(FieldWorkspace, v))
}

// WorkspaceLTE applies the LTE predicate on the "workspace" field.
func WorkspaceLTE(v string) predicate.Agents {
	return predicate.Agents(sql.FieldLTE(FieldWorkspace, v))
}

// WorkspaceContains applies the Contains predicate on the "workspace" field.
func WorkspaceContains(v string) predicate.Agents {
	return predicate.Agents(sql.FieldContains(FieldWorkspace, v))
}

// WorkspaceHasPrefix applies the HasPrefix predicate on the "workspace" field.
func WorkspaceHasPrefix(v string) predicate.Agents {
	return predicate.Agents(sql.FieldHasPrefix(FieldWorkspace, v))
}

// WorkspaceHasSuffix applies the HasSuffix predicate on the "workspace" field.
func WorkspaceHasSuffix(v string) predicate.Agents {
	return predicate.Agents(sql.FieldHasSuffix(FieldWorkspace, v))
}

// WorkspaceIsNil applies the IsNil predicate on the "workspace" field.
func WorkspaceIsNil() predicate.Agents {
	return predicate.Agents(sql.FieldIsNull(FieldWorkspace))
}

// WorkspaceNotNil applies the NotNil predicate on the "workspace" field.
func WorkspaceNotNil() predicate.Agents {
	return predicate.Agents(sql.FieldNotNull(FieldWorkspace))
}

// WorkspaceEqualFold applies the EqualFold predicate on the "workspace" field.
func WorkspaceEqualFold(v string) predicate.Agents {
	return predicate.Agents(sql.FieldEqualFold(FieldWorkspace, v))
}

// WorkspaceContainsFold applies the ContainsFold predicate on the "workspace" field.
func WorkspaceContainsFold(v string) predicate.Agents {
	return predicate.Agents(sql.FieldContainsFold(FieldWorkspace, v))
}

// ServerEQ applies the EQ predicate on the "server" field.
func ServerEQ(v string) predicate.Agents {
	return predicate.Agents(sql.FieldEQ(FieldServer, v))
}

// ServerNEQ applies the NEQ predicate on the "server" field.
func ServerNEQ(v string) predicate.Agents {
	return predicate.Agents(sql.FieldNEQ(FieldServer, v))
}

// ServerIn applies the In predicate on the "server" field.
func ServerIn(vs ...string) predicate.Agents {
	return predicate.Agents(sql.FieldIn(FieldServer, vs...))
}

// ServerNotIn applies the NotIn predicate on the "server" field.
func ServerNotIn(vs ...string) predicate.Agents {
	return predicate.Agents(sql.FieldNotIn(FieldServer, vs...))
}

// ServerGT applies the GT predicate on the "server" field.
func ServerGT(v string) predicate.Agents {
	return predicate.Agents(sql.FieldGT(FieldServer, v))
}

// ServerGTE applies the GTE predicate on the "server" field.
func ServerGTE(v string) predicate.Agents {
	return predicate.Agents(sql.FieldGTE(FieldServer, v))
}

// ServerLT applies the LT predicate on the "server" field.
func ServerLT(v string) predicate.Agents {
	return predicate.Agents(sql.FieldLT(FieldServer, v))
}

// ServerLTE applies the LTE predicate on the "server" field.
func ServerLTE(v string) predicate.Agents {
	return predicate.Agents(sql.FieldLTE(FieldServer, v))
}

// ServerContains applies the Contains predicate on the "server" field.
func ServerContains(v string) predicate.Agents {
	return predicate.Agents(sql.FieldContains(FieldServer, v))
}

// ServerHasPrefix applies the HasPrefix predicate on the "server" field.
func ServerHasPrefix(v string) predicate.Agents {
	return predicate.Agents(sql.FieldHasPrefix(FieldServer, v))
}

// ServerHasSuffix applies the HasSuffix predicate on the "server" field.
func ServerHasSuffix(v string) predicate.Agents {
	return predicate.Agents(sql.FieldHasSuffix(FieldServer, v))
}

// ServerIsNil applies the IsNil predicate on the "server" field.
func ServerIsNil() predicate.Agents {
	return predicate.Agents(sql.FieldIsNull(FieldServer))
}

// ServerNotNil applies the NotNil predicate on the "server" field.
func ServerNotNil() predicate.Agents {
	return predicate.Agents(sql.FieldNotNull(FieldServer))
}

// ServerEqualFold applies the EqualFold predicate on the "server" field.
func ServerEqualFold(v string) predicate.Agents {
	return predicate.Agents(sql.FieldEqualFold(FieldServer, v))
}

// ServerContainsFold applies the ContainsFold predicate on the "server" field.
func ServerContainsFold(v string) predicate.Agents {
	return predicate.Agents(sql.FieldContainsFold(FieldServer, v))
}

// LastSeenEQ applies the EQ predicate on the "last_seen" field.
func LastSeenEQ(v time.Time) predicate.Agents {
	return predicate.Agents(sql.FieldEQ(FieldLastSeen, v))
}

// LastSeenNEQ applies the NEQ predicate on the "last_seen" field.
func LastSeenNEQ(v time.Time) predicate.Agents {
	return predicate.Agents(sql.FieldNEQ(FieldLastSeen, v))
}

// LastSeenIn applies the In predicate on the "last_seen" field.
func LastSeenIn(vs ...time.Time) predicate.Agents {
	return predicate.Agents(sql.FieldIn(FieldLastSeen, vs...))
}

// LastSeenNotIn applies the NotIn predicate on the "last_seen" field.
func LastSeenNotIn(vs ...time.Time) predicate.Agents {
	return predicate.Agents(sql.FieldNotIn(FieldLastSeen, vs...))
}

// LastSeenGT applies the GT predicate on the "last_seen" field.
func LastSeenGT(v time.Time) predicate.Agents {
	return predicate.Agents(sql.FieldGT(FieldLastSeen, v))
}

// LastSeenGTE applies the GTE predicate on the "last_seen" field.
func LastSeenGTE(v time.Time) predicate.Agents {
	return predicate.Agents(sql.FieldGTE(FieldLastSeen, v))
}

// LastSeenLT applies the LT predicate on the "last_seen" field.
func LastSeenLT(v time.Time) predicate.Agents {
	return predicate.Agents(sql.FieldLT(FieldLastSeen, v))
}

// LastSeenLTE applies the LTE predicate on the "last_seen" field.
func LastSeenLTE(v time.Time) predicate.Agents {
	return predicate.Agents(sql.FieldLTE(FieldLastSeen, v))
}

// HasAgentTasks applies the HasEdge predicate on the "agent_tasks" edge.
func HasAgentTasks() predicate.Agents {
	return predicate.Agents(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AgentTasksTable, AgentTasksColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAgentTasksWith applies the HasEdge predicate on the "agent_tasks" edge with a given conditions (other predicates).
func HasAgentTasksWith(preds ...predicate.AgentTasks) predicate.Agents {
	return predicate.Agents(func(s *sql.Selector) {
		step := newAgentTasksStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAgentLabels applies the HasEdge predicate on the "agent_labels" edge.
func HasAgentLabels() predicate.Agents {
	return predicate.Agents(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, AgentLabelsTable, AgentLabelsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAgentLabelsWith applies the HasEdge predicate on the "agent_labels" edge with a given conditions (other predicates).
func HasAgentLabelsWith(preds ...predicate.AgentLabels) predicate.Agents {
	return predicate.Agents(func(s *sql.Selector) {
		step := newAgentLabelsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Agents) predicate.Agents {
	return predicate.Agents(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Agents) predicate.Agents {
	return predicate.Agents(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Agents) predicate.Agents {
	return predicate.Agents(sql.NotPredicates(p))
}
