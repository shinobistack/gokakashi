// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/shinobistack/gokakashi/ent/agentlabels"
	"github.com/shinobistack/gokakashi/ent/agents"
	"github.com/shinobistack/gokakashi/ent/predicate"
)

// AgentLabelsUpdate is the builder for updating AgentLabels entities.
type AgentLabelsUpdate struct {
	config
	hooks    []Hook
	mutation *AgentLabelsMutation
}

// Where appends a list predicates to the AgentLabelsUpdate builder.
func (alu *AgentLabelsUpdate) Where(ps ...predicate.AgentLabels) *AgentLabelsUpdate {
	alu.mutation.Where(ps...)
	return alu
}

// SetAgentID sets the "agent_id" field.
func (alu *AgentLabelsUpdate) SetAgentID(i int) *AgentLabelsUpdate {
	alu.mutation.SetAgentID(i)
	return alu
}

// SetNillableAgentID sets the "agent_id" field if the given value is not nil.
func (alu *AgentLabelsUpdate) SetNillableAgentID(i *int) *AgentLabelsUpdate {
	if i != nil {
		alu.SetAgentID(*i)
	}
	return alu
}

// SetKey sets the "key" field.
func (alu *AgentLabelsUpdate) SetKey(s string) *AgentLabelsUpdate {
	alu.mutation.SetKey(s)
	return alu
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (alu *AgentLabelsUpdate) SetNillableKey(s *string) *AgentLabelsUpdate {
	if s != nil {
		alu.SetKey(*s)
	}
	return alu
}

// SetValue sets the "value" field.
func (alu *AgentLabelsUpdate) SetValue(s string) *AgentLabelsUpdate {
	alu.mutation.SetValue(s)
	return alu
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (alu *AgentLabelsUpdate) SetNillableValue(s *string) *AgentLabelsUpdate {
	if s != nil {
		alu.SetValue(*s)
	}
	return alu
}

// SetAgentsID sets the "agents" edge to the Agents entity by ID.
func (alu *AgentLabelsUpdate) SetAgentsID(id int) *AgentLabelsUpdate {
	alu.mutation.SetAgentsID(id)
	return alu
}

// SetAgents sets the "agents" edge to the Agents entity.
func (alu *AgentLabelsUpdate) SetAgents(a *Agents) *AgentLabelsUpdate {
	return alu.SetAgentsID(a.ID)
}

// Mutation returns the AgentLabelsMutation object of the builder.
func (alu *AgentLabelsUpdate) Mutation() *AgentLabelsMutation {
	return alu.mutation
}

// ClearAgents clears the "agents" edge to the Agents entity.
func (alu *AgentLabelsUpdate) ClearAgents() *AgentLabelsUpdate {
	alu.mutation.ClearAgents()
	return alu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (alu *AgentLabelsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, alu.sqlSave, alu.mutation, alu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (alu *AgentLabelsUpdate) SaveX(ctx context.Context) int {
	affected, err := alu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (alu *AgentLabelsUpdate) Exec(ctx context.Context) error {
	_, err := alu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (alu *AgentLabelsUpdate) ExecX(ctx context.Context) {
	if err := alu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (alu *AgentLabelsUpdate) check() error {
	if v, ok := alu.mutation.Key(); ok {
		if err := agentlabels.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`ent: validator failed for field "AgentLabels.key": %w`, err)}
		}
	}
	if v, ok := alu.mutation.Value(); ok {
		if err := agentlabels.ValueValidator(v); err != nil {
			return &ValidationError{Name: "value", err: fmt.Errorf(`ent: validator failed for field "AgentLabels.value": %w`, err)}
		}
	}
	if alu.mutation.AgentsCleared() && len(alu.mutation.AgentsIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "AgentLabels.agents"`)
	}
	return nil
}

func (alu *AgentLabelsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := alu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(agentlabels.Table, agentlabels.Columns, sqlgraph.NewFieldSpec(agentlabels.FieldID, field.TypeInt))
	if ps := alu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := alu.mutation.Key(); ok {
		_spec.SetField(agentlabels.FieldKey, field.TypeString, value)
	}
	if value, ok := alu.mutation.Value(); ok {
		_spec.SetField(agentlabels.FieldValue, field.TypeString, value)
	}
	if alu.mutation.AgentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   agentlabels.AgentsTable,
			Columns: []string{agentlabels.AgentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agents.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := alu.mutation.AgentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   agentlabels.AgentsTable,
			Columns: []string{agentlabels.AgentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agents.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, alu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{agentlabels.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	alu.mutation.done = true
	return n, nil
}

// AgentLabelsUpdateOne is the builder for updating a single AgentLabels entity.
type AgentLabelsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AgentLabelsMutation
}

// SetAgentID sets the "agent_id" field.
func (aluo *AgentLabelsUpdateOne) SetAgentID(i int) *AgentLabelsUpdateOne {
	aluo.mutation.SetAgentID(i)
	return aluo
}

// SetNillableAgentID sets the "agent_id" field if the given value is not nil.
func (aluo *AgentLabelsUpdateOne) SetNillableAgentID(i *int) *AgentLabelsUpdateOne {
	if i != nil {
		aluo.SetAgentID(*i)
	}
	return aluo
}

// SetKey sets the "key" field.
func (aluo *AgentLabelsUpdateOne) SetKey(s string) *AgentLabelsUpdateOne {
	aluo.mutation.SetKey(s)
	return aluo
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (aluo *AgentLabelsUpdateOne) SetNillableKey(s *string) *AgentLabelsUpdateOne {
	if s != nil {
		aluo.SetKey(*s)
	}
	return aluo
}

// SetValue sets the "value" field.
func (aluo *AgentLabelsUpdateOne) SetValue(s string) *AgentLabelsUpdateOne {
	aluo.mutation.SetValue(s)
	return aluo
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (aluo *AgentLabelsUpdateOne) SetNillableValue(s *string) *AgentLabelsUpdateOne {
	if s != nil {
		aluo.SetValue(*s)
	}
	return aluo
}

// SetAgentsID sets the "agents" edge to the Agents entity by ID.
func (aluo *AgentLabelsUpdateOne) SetAgentsID(id int) *AgentLabelsUpdateOne {
	aluo.mutation.SetAgentsID(id)
	return aluo
}

// SetAgents sets the "agents" edge to the Agents entity.
func (aluo *AgentLabelsUpdateOne) SetAgents(a *Agents) *AgentLabelsUpdateOne {
	return aluo.SetAgentsID(a.ID)
}

// Mutation returns the AgentLabelsMutation object of the builder.
func (aluo *AgentLabelsUpdateOne) Mutation() *AgentLabelsMutation {
	return aluo.mutation
}

// ClearAgents clears the "agents" edge to the Agents entity.
func (aluo *AgentLabelsUpdateOne) ClearAgents() *AgentLabelsUpdateOne {
	aluo.mutation.ClearAgents()
	return aluo
}

// Where appends a list predicates to the AgentLabelsUpdate builder.
func (aluo *AgentLabelsUpdateOne) Where(ps ...predicate.AgentLabels) *AgentLabelsUpdateOne {
	aluo.mutation.Where(ps...)
	return aluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aluo *AgentLabelsUpdateOne) Select(field string, fields ...string) *AgentLabelsUpdateOne {
	aluo.fields = append([]string{field}, fields...)
	return aluo
}

// Save executes the query and returns the updated AgentLabels entity.
func (aluo *AgentLabelsUpdateOne) Save(ctx context.Context) (*AgentLabels, error) {
	return withHooks(ctx, aluo.sqlSave, aluo.mutation, aluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aluo *AgentLabelsUpdateOne) SaveX(ctx context.Context) *AgentLabels {
	node, err := aluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aluo *AgentLabelsUpdateOne) Exec(ctx context.Context) error {
	_, err := aluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aluo *AgentLabelsUpdateOne) ExecX(ctx context.Context) {
	if err := aluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (aluo *AgentLabelsUpdateOne) check() error {
	if v, ok := aluo.mutation.Key(); ok {
		if err := agentlabels.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`ent: validator failed for field "AgentLabels.key": %w`, err)}
		}
	}
	if v, ok := aluo.mutation.Value(); ok {
		if err := agentlabels.ValueValidator(v); err != nil {
			return &ValidationError{Name: "value", err: fmt.Errorf(`ent: validator failed for field "AgentLabels.value": %w`, err)}
		}
	}
	if aluo.mutation.AgentsCleared() && len(aluo.mutation.AgentsIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "AgentLabels.agents"`)
	}
	return nil
}

func (aluo *AgentLabelsUpdateOne) sqlSave(ctx context.Context) (_node *AgentLabels, err error) {
	if err := aluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(agentlabels.Table, agentlabels.Columns, sqlgraph.NewFieldSpec(agentlabels.FieldID, field.TypeInt))
	id, ok := aluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AgentLabels.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, agentlabels.FieldID)
		for _, f := range fields {
			if !agentlabels.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != agentlabels.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := aluo.mutation.Key(); ok {
		_spec.SetField(agentlabels.FieldKey, field.TypeString, value)
	}
	if value, ok := aluo.mutation.Value(); ok {
		_spec.SetField(agentlabels.FieldValue, field.TypeString, value)
	}
	if aluo.mutation.AgentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   agentlabels.AgentsTable,
			Columns: []string{agentlabels.AgentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agents.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aluo.mutation.AgentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   agentlabels.AgentsTable,
			Columns: []string{agentlabels.AgentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agents.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AgentLabels{config: aluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{agentlabels.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	aluo.mutation.done = true
	return _node, nil
}
