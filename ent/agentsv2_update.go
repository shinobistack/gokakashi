// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/shinobistack/gokakashi/ent/agentsv2"
	"github.com/shinobistack/gokakashi/ent/predicate"
)

// AgentsV2Update is the builder for updating AgentsV2 entities.
type AgentsV2Update struct {
	config
	hooks    []Hook
	mutation *AgentsV2Mutation
}

// Where appends a list predicates to the AgentsV2Update builder.
func (av *AgentsV2Update) Where(ps ...predicate.AgentsV2) *AgentsV2Update {
	av.mutation.Where(ps...)
	return av
}

// SetStatus sets the "status" field.
func (av *AgentsV2Update) SetStatus(s string) *AgentsV2Update {
	av.mutation.SetStatus(s)
	return av
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (av *AgentsV2Update) SetNillableStatus(s *string) *AgentsV2Update {
	if s != nil {
		av.SetStatus(*s)
	}
	return av
}

// SetLastHeartbeatAt sets the "last_heartbeat_at" field.
func (av *AgentsV2Update) SetLastHeartbeatAt(t time.Time) *AgentsV2Update {
	av.mutation.SetLastHeartbeatAt(t)
	return av
}

// ClearLastHeartbeatAt clears the value of the "last_heartbeat_at" field.
func (av *AgentsV2Update) ClearLastHeartbeatAt() *AgentsV2Update {
	av.mutation.ClearLastHeartbeatAt()
	return av
}

// SetUpdatedAt sets the "updated_at" field.
func (av *AgentsV2Update) SetUpdatedAt(t time.Time) *AgentsV2Update {
	av.mutation.SetUpdatedAt(t)
	return av
}

// Mutation returns the AgentsV2Mutation object of the builder.
func (av *AgentsV2Update) Mutation() *AgentsV2Mutation {
	return av.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (av *AgentsV2Update) Save(ctx context.Context) (int, error) {
	av.defaults()
	return withHooks(ctx, av.sqlSave, av.mutation, av.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (av *AgentsV2Update) SaveX(ctx context.Context) int {
	affected, err := av.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (av *AgentsV2Update) Exec(ctx context.Context) error {
	_, err := av.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (av *AgentsV2Update) ExecX(ctx context.Context) {
	if err := av.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (av *AgentsV2Update) defaults() {
	if _, ok := av.mutation.LastHeartbeatAt(); !ok && !av.mutation.LastHeartbeatAtCleared() {
		v := agentsv2.UpdateDefaultLastHeartbeatAt()
		av.mutation.SetLastHeartbeatAt(v)
	}
	if _, ok := av.mutation.UpdatedAt(); !ok {
		v := agentsv2.UpdateDefaultUpdatedAt()
		av.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (av *AgentsV2Update) check() error {
	if v, ok := av.mutation.Status(); ok {
		if err := agentsv2.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "AgentsV2.status": %w`, err)}
		}
	}
	return nil
}

func (av *AgentsV2Update) sqlSave(ctx context.Context) (n int, err error) {
	if err := av.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(agentsv2.Table, agentsv2.Columns, sqlgraph.NewFieldSpec(agentsv2.FieldID, field.TypeUUID))
	if ps := av.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := av.mutation.Status(); ok {
		_spec.SetField(agentsv2.FieldStatus, field.TypeString, value)
	}
	if value, ok := av.mutation.LastHeartbeatAt(); ok {
		_spec.SetField(agentsv2.FieldLastHeartbeatAt, field.TypeTime, value)
	}
	if av.mutation.LastHeartbeatAtCleared() {
		_spec.ClearField(agentsv2.FieldLastHeartbeatAt, field.TypeTime)
	}
	if value, ok := av.mutation.UpdatedAt(); ok {
		_spec.SetField(agentsv2.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, av.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{agentsv2.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	av.mutation.done = true
	return n, nil
}

// AgentsV2UpdateOne is the builder for updating a single AgentsV2 entity.
type AgentsV2UpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AgentsV2Mutation
}

// SetStatus sets the "status" field.
func (avo *AgentsV2UpdateOne) SetStatus(s string) *AgentsV2UpdateOne {
	avo.mutation.SetStatus(s)
	return avo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (avo *AgentsV2UpdateOne) SetNillableStatus(s *string) *AgentsV2UpdateOne {
	if s != nil {
		avo.SetStatus(*s)
	}
	return avo
}

// SetLastHeartbeatAt sets the "last_heartbeat_at" field.
func (avo *AgentsV2UpdateOne) SetLastHeartbeatAt(t time.Time) *AgentsV2UpdateOne {
	avo.mutation.SetLastHeartbeatAt(t)
	return avo
}

// ClearLastHeartbeatAt clears the value of the "last_heartbeat_at" field.
func (avo *AgentsV2UpdateOne) ClearLastHeartbeatAt() *AgentsV2UpdateOne {
	avo.mutation.ClearLastHeartbeatAt()
	return avo
}

// SetUpdatedAt sets the "updated_at" field.
func (avo *AgentsV2UpdateOne) SetUpdatedAt(t time.Time) *AgentsV2UpdateOne {
	avo.mutation.SetUpdatedAt(t)
	return avo
}

// Mutation returns the AgentsV2Mutation object of the builder.
func (avo *AgentsV2UpdateOne) Mutation() *AgentsV2Mutation {
	return avo.mutation
}

// Where appends a list predicates to the AgentsV2Update builder.
func (avo *AgentsV2UpdateOne) Where(ps ...predicate.AgentsV2) *AgentsV2UpdateOne {
	avo.mutation.Where(ps...)
	return avo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (avo *AgentsV2UpdateOne) Select(field string, fields ...string) *AgentsV2UpdateOne {
	avo.fields = append([]string{field}, fields...)
	return avo
}

// Save executes the query and returns the updated AgentsV2 entity.
func (avo *AgentsV2UpdateOne) Save(ctx context.Context) (*AgentsV2, error) {
	avo.defaults()
	return withHooks(ctx, avo.sqlSave, avo.mutation, avo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (avo *AgentsV2UpdateOne) SaveX(ctx context.Context) *AgentsV2 {
	node, err := avo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (avo *AgentsV2UpdateOne) Exec(ctx context.Context) error {
	_, err := avo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (avo *AgentsV2UpdateOne) ExecX(ctx context.Context) {
	if err := avo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (avo *AgentsV2UpdateOne) defaults() {
	if _, ok := avo.mutation.LastHeartbeatAt(); !ok && !avo.mutation.LastHeartbeatAtCleared() {
		v := agentsv2.UpdateDefaultLastHeartbeatAt()
		avo.mutation.SetLastHeartbeatAt(v)
	}
	if _, ok := avo.mutation.UpdatedAt(); !ok {
		v := agentsv2.UpdateDefaultUpdatedAt()
		avo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (avo *AgentsV2UpdateOne) check() error {
	if v, ok := avo.mutation.Status(); ok {
		if err := agentsv2.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "AgentsV2.status": %w`, err)}
		}
	}
	return nil
}

func (avo *AgentsV2UpdateOne) sqlSave(ctx context.Context) (_node *AgentsV2, err error) {
	if err := avo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(agentsv2.Table, agentsv2.Columns, sqlgraph.NewFieldSpec(agentsv2.FieldID, field.TypeUUID))
	id, ok := avo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AgentsV2.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := avo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, agentsv2.FieldID)
		for _, f := range fields {
			if !agentsv2.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != agentsv2.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := avo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := avo.mutation.Status(); ok {
		_spec.SetField(agentsv2.FieldStatus, field.TypeString, value)
	}
	if value, ok := avo.mutation.LastHeartbeatAt(); ok {
		_spec.SetField(agentsv2.FieldLastHeartbeatAt, field.TypeTime, value)
	}
	if avo.mutation.LastHeartbeatAtCleared() {
		_spec.ClearField(agentsv2.FieldLastHeartbeatAt, field.TypeTime)
	}
	if value, ok := avo.mutation.UpdatedAt(); ok {
		_spec.SetField(agentsv2.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &AgentsV2{config: avo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, avo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{agentsv2.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	avo.mutation.done = true
	return _node, nil
}
