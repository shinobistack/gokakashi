// Code generated by ent, DO NOT EDIT.

package scanlabels

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the scanlabels type in the database.
	Label = "scan_labels"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldScanID holds the string denoting the scan_id field in the database.
	FieldScanID = "scan_id"
	// FieldKey holds the string denoting the key field in the database.
	FieldKey = "key"
	// FieldValue holds the string denoting the value field in the database.
	FieldValue = "value"
	// EdgeScan holds the string denoting the scan edge name in mutations.
	EdgeScan = "scan"
	// Table holds the table name of the scanlabels in the database.
	Table = "scan_labels"
	// ScanTable is the table that holds the scan relation/edge.
	ScanTable = "scan_labels"
	// ScanInverseTable is the table name for the Scans entity.
	// It exists in this package in order to avoid circular dependency with the "scans" package.
	ScanInverseTable = "scans"
	// ScanColumn is the table column denoting the scan relation/edge.
	ScanColumn = "scan_id"
)

// Columns holds all SQL columns for scanlabels fields.
var Columns = []string{
	FieldID,
	FieldScanID,
	FieldKey,
	FieldValue,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// KeyValidator is a validator for the "key" field. It is called by the builders before save.
	KeyValidator func(string) error
	// ValueValidator is a validator for the "value" field. It is called by the builders before save.
	ValueValidator func(string) error
)

// OrderOption defines the ordering options for the ScanLabels queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByScanID orders the results by the scan_id field.
func ByScanID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScanID, opts...).ToFunc()
}

// ByKey orders the results by the key field.
func ByKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKey, opts...).ToFunc()
}

// ByValue orders the results by the value field.
func ByValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldValue, opts...).ToFunc()
}

// ByScanField orders the results by scan field.
func ByScanField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newScanStep(), sql.OrderByField(field, opts...))
	}
}
func newScanStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ScanInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ScanTable, ScanColumn),
	)
}
