// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/shinobistack/gokakashi/ent/agentlabels"
	"github.com/shinobistack/gokakashi/ent/agents"
	"github.com/shinobistack/gokakashi/ent/predicate"
)

// AgentLabelsQuery is the builder for querying AgentLabels entities.
type AgentLabelsQuery struct {
	config
	ctx        *QueryContext
	order      []agentlabels.OrderOption
	inters     []Interceptor
	predicates []predicate.AgentLabels
	withAgents *AgentsQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the AgentLabelsQuery builder.
func (alq *AgentLabelsQuery) Where(ps ...predicate.AgentLabels) *AgentLabelsQuery {
	alq.predicates = append(alq.predicates, ps...)
	return alq
}

// Limit the number of records to be returned by this query.
func (alq *AgentLabelsQuery) Limit(limit int) *AgentLabelsQuery {
	alq.ctx.Limit = &limit
	return alq
}

// Offset to start from.
func (alq *AgentLabelsQuery) Offset(offset int) *AgentLabelsQuery {
	alq.ctx.Offset = &offset
	return alq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (alq *AgentLabelsQuery) Unique(unique bool) *AgentLabelsQuery {
	alq.ctx.Unique = &unique
	return alq
}

// Order specifies how the records should be ordered.
func (alq *AgentLabelsQuery) Order(o ...agentlabels.OrderOption) *AgentLabelsQuery {
	alq.order = append(alq.order, o...)
	return alq
}

// QueryAgents chains the current query on the "agents" edge.
func (alq *AgentLabelsQuery) QueryAgents() *AgentsQuery {
	query := (&AgentsClient{config: alq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := alq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := alq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(agentlabels.Table, agentlabels.FieldID, selector),
			sqlgraph.To(agents.Table, agents.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, agentlabels.AgentsTable, agentlabels.AgentsColumn),
		)
		fromU = sqlgraph.SetNeighbors(alq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first AgentLabels entity from the query.
// Returns a *NotFoundError when no AgentLabels was found.
func (alq *AgentLabelsQuery) First(ctx context.Context) (*AgentLabels, error) {
	nodes, err := alq.Limit(1).All(setContextOp(ctx, alq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{agentlabels.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (alq *AgentLabelsQuery) FirstX(ctx context.Context) *AgentLabels {
	node, err := alq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first AgentLabels ID from the query.
// Returns a *NotFoundError when no AgentLabels ID was found.
func (alq *AgentLabelsQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = alq.Limit(1).IDs(setContextOp(ctx, alq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{agentlabels.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (alq *AgentLabelsQuery) FirstIDX(ctx context.Context) int {
	id, err := alq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single AgentLabels entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one AgentLabels entity is found.
// Returns a *NotFoundError when no AgentLabels entities are found.
func (alq *AgentLabelsQuery) Only(ctx context.Context) (*AgentLabels, error) {
	nodes, err := alq.Limit(2).All(setContextOp(ctx, alq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{agentlabels.Label}
	default:
		return nil, &NotSingularError{agentlabels.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (alq *AgentLabelsQuery) OnlyX(ctx context.Context) *AgentLabels {
	node, err := alq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only AgentLabels ID in the query.
// Returns a *NotSingularError when more than one AgentLabels ID is found.
// Returns a *NotFoundError when no entities are found.
func (alq *AgentLabelsQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = alq.Limit(2).IDs(setContextOp(ctx, alq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{agentlabels.Label}
	default:
		err = &NotSingularError{agentlabels.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (alq *AgentLabelsQuery) OnlyIDX(ctx context.Context) int {
	id, err := alq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of AgentLabelsSlice.
func (alq *AgentLabelsQuery) All(ctx context.Context) ([]*AgentLabels, error) {
	ctx = setContextOp(ctx, alq.ctx, ent.OpQueryAll)
	if err := alq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*AgentLabels, *AgentLabelsQuery]()
	return withInterceptors[[]*AgentLabels](ctx, alq, qr, alq.inters)
}

// AllX is like All, but panics if an error occurs.
func (alq *AgentLabelsQuery) AllX(ctx context.Context) []*AgentLabels {
	nodes, err := alq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of AgentLabels IDs.
func (alq *AgentLabelsQuery) IDs(ctx context.Context) (ids []int, err error) {
	if alq.ctx.Unique == nil && alq.path != nil {
		alq.Unique(true)
	}
	ctx = setContextOp(ctx, alq.ctx, ent.OpQueryIDs)
	if err = alq.Select(agentlabels.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (alq *AgentLabelsQuery) IDsX(ctx context.Context) []int {
	ids, err := alq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (alq *AgentLabelsQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, alq.ctx, ent.OpQueryCount)
	if err := alq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, alq, querierCount[*AgentLabelsQuery](), alq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (alq *AgentLabelsQuery) CountX(ctx context.Context) int {
	count, err := alq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (alq *AgentLabelsQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, alq.ctx, ent.OpQueryExist)
	switch _, err := alq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (alq *AgentLabelsQuery) ExistX(ctx context.Context) bool {
	exist, err := alq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the AgentLabelsQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (alq *AgentLabelsQuery) Clone() *AgentLabelsQuery {
	if alq == nil {
		return nil
	}
	return &AgentLabelsQuery{
		config:     alq.config,
		ctx:        alq.ctx.Clone(),
		order:      append([]agentlabels.OrderOption{}, alq.order...),
		inters:     append([]Interceptor{}, alq.inters...),
		predicates: append([]predicate.AgentLabels{}, alq.predicates...),
		withAgents: alq.withAgents.Clone(),
		// clone intermediate query.
		sql:  alq.sql.Clone(),
		path: alq.path,
	}
}

// WithAgents tells the query-builder to eager-load the nodes that are connected to
// the "agents" edge. The optional arguments are used to configure the query builder of the edge.
func (alq *AgentLabelsQuery) WithAgents(opts ...func(*AgentsQuery)) *AgentLabelsQuery {
	query := (&AgentsClient{config: alq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	alq.withAgents = query
	return alq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		AgentID int `json:"agent_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.AgentLabels.Query().
//		GroupBy(agentlabels.FieldAgentID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (alq *AgentLabelsQuery) GroupBy(field string, fields ...string) *AgentLabelsGroupBy {
	alq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &AgentLabelsGroupBy{build: alq}
	grbuild.flds = &alq.ctx.Fields
	grbuild.label = agentlabels.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		AgentID int `json:"agent_id,omitempty"`
//	}
//
//	client.AgentLabels.Query().
//		Select(agentlabels.FieldAgentID).
//		Scan(ctx, &v)
func (alq *AgentLabelsQuery) Select(fields ...string) *AgentLabelsSelect {
	alq.ctx.Fields = append(alq.ctx.Fields, fields...)
	sbuild := &AgentLabelsSelect{AgentLabelsQuery: alq}
	sbuild.label = agentlabels.Label
	sbuild.flds, sbuild.scan = &alq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a AgentLabelsSelect configured with the given aggregations.
func (alq *AgentLabelsQuery) Aggregate(fns ...AggregateFunc) *AgentLabelsSelect {
	return alq.Select().Aggregate(fns...)
}

func (alq *AgentLabelsQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range alq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, alq); err != nil {
				return err
			}
		}
	}
	for _, f := range alq.ctx.Fields {
		if !agentlabels.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if alq.path != nil {
		prev, err := alq.path(ctx)
		if err != nil {
			return err
		}
		alq.sql = prev
	}
	return nil
}

func (alq *AgentLabelsQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*AgentLabels, error) {
	var (
		nodes       = []*AgentLabels{}
		_spec       = alq.querySpec()
		loadedTypes = [1]bool{
			alq.withAgents != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*AgentLabels).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &AgentLabels{config: alq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, alq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := alq.withAgents; query != nil {
		if err := alq.loadAgents(ctx, query, nodes, nil,
			func(n *AgentLabels, e *Agents) { n.Edges.Agents = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (alq *AgentLabelsQuery) loadAgents(ctx context.Context, query *AgentsQuery, nodes []*AgentLabels, init func(*AgentLabels), assign func(*AgentLabels, *Agents)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*AgentLabels)
	for i := range nodes {
		fk := nodes[i].AgentID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(agents.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "agent_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (alq *AgentLabelsQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := alq.querySpec()
	_spec.Node.Columns = alq.ctx.Fields
	if len(alq.ctx.Fields) > 0 {
		_spec.Unique = alq.ctx.Unique != nil && *alq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, alq.driver, _spec)
}

func (alq *AgentLabelsQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(agentlabels.Table, agentlabels.Columns, sqlgraph.NewFieldSpec(agentlabels.FieldID, field.TypeInt))
	_spec.From = alq.sql
	if unique := alq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if alq.path != nil {
		_spec.Unique = true
	}
	if fields := alq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, agentlabels.FieldID)
		for i := range fields {
			if fields[i] != agentlabels.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if alq.withAgents != nil {
			_spec.Node.AddColumnOnce(agentlabels.FieldAgentID)
		}
	}
	if ps := alq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := alq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := alq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := alq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (alq *AgentLabelsQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(alq.driver.Dialect())
	t1 := builder.Table(agentlabels.Table)
	columns := alq.ctx.Fields
	if len(columns) == 0 {
		columns = agentlabels.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if alq.sql != nil {
		selector = alq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if alq.ctx.Unique != nil && *alq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range alq.predicates {
		p(selector)
	}
	for _, p := range alq.order {
		p(selector)
	}
	if offset := alq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := alq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// AgentLabelsGroupBy is the group-by builder for AgentLabels entities.
type AgentLabelsGroupBy struct {
	selector
	build *AgentLabelsQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (algb *AgentLabelsGroupBy) Aggregate(fns ...AggregateFunc) *AgentLabelsGroupBy {
	algb.fns = append(algb.fns, fns...)
	return algb
}

// Scan applies the selector query and scans the result into the given value.
func (algb *AgentLabelsGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, algb.build.ctx, ent.OpQueryGroupBy)
	if err := algb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*AgentLabelsQuery, *AgentLabelsGroupBy](ctx, algb.build, algb, algb.build.inters, v)
}

func (algb *AgentLabelsGroupBy) sqlScan(ctx context.Context, root *AgentLabelsQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(algb.fns))
	for _, fn := range algb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*algb.flds)+len(algb.fns))
		for _, f := range *algb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*algb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := algb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// AgentLabelsSelect is the builder for selecting fields of AgentLabels entities.
type AgentLabelsSelect struct {
	*AgentLabelsQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (als *AgentLabelsSelect) Aggregate(fns ...AggregateFunc) *AgentLabelsSelect {
	als.fns = append(als.fns, fns...)
	return als
}

// Scan applies the selector query and scans the result into the given value.
func (als *AgentLabelsSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, als.ctx, ent.OpQuerySelect)
	if err := als.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*AgentLabelsQuery, *AgentLabelsSelect](ctx, als.AgentLabelsQuery, als, als.inters, v)
}

func (als *AgentLabelsSelect) sqlScan(ctx context.Context, root *AgentLabelsQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(als.fns))
	for _, fn := range als.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*als.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := als.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
