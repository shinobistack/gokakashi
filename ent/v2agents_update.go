// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/shinobistack/gokakashi/ent/predicate"
	"github.com/shinobistack/gokakashi/ent/v2agents"
)

// V2AgentsUpdate is the builder for updating V2Agents entities.
type V2AgentsUpdate struct {
	config
	hooks    []Hook
	mutation *V2AgentsMutation
}

// Where appends a list predicates to the V2AgentsUpdate builder.
func (vu *V2AgentsUpdate) Where(ps ...predicate.V2Agents) *V2AgentsUpdate {
	vu.mutation.Where(ps...)
	return vu
}

// SetStatus sets the "status" field.
func (vu *V2AgentsUpdate) SetStatus(s string) *V2AgentsUpdate {
	vu.mutation.SetStatus(s)
	return vu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (vu *V2AgentsUpdate) SetNillableStatus(s *string) *V2AgentsUpdate {
	if s != nil {
		vu.SetStatus(*s)
	}
	return vu
}

// SetLastHeartbeatAt sets the "last_heartbeat_at" field.
func (vu *V2AgentsUpdate) SetLastHeartbeatAt(t time.Time) *V2AgentsUpdate {
	vu.mutation.SetLastHeartbeatAt(t)
	return vu
}

// ClearLastHeartbeatAt clears the value of the "last_heartbeat_at" field.
func (vu *V2AgentsUpdate) ClearLastHeartbeatAt() *V2AgentsUpdate {
	vu.mutation.ClearLastHeartbeatAt()
	return vu
}

// SetUpdatedAt sets the "updated_at" field.
func (vu *V2AgentsUpdate) SetUpdatedAt(t time.Time) *V2AgentsUpdate {
	vu.mutation.SetUpdatedAt(t)
	return vu
}

// Mutation returns the V2AgentsMutation object of the builder.
func (vu *V2AgentsUpdate) Mutation() *V2AgentsMutation {
	return vu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vu *V2AgentsUpdate) Save(ctx context.Context) (int, error) {
	vu.defaults()
	return withHooks(ctx, vu.sqlSave, vu.mutation, vu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vu *V2AgentsUpdate) SaveX(ctx context.Context) int {
	affected, err := vu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vu *V2AgentsUpdate) Exec(ctx context.Context) error {
	_, err := vu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vu *V2AgentsUpdate) ExecX(ctx context.Context) {
	if err := vu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vu *V2AgentsUpdate) defaults() {
	if _, ok := vu.mutation.LastHeartbeatAt(); !ok && !vu.mutation.LastHeartbeatAtCleared() {
		v := v2agents.UpdateDefaultLastHeartbeatAt()
		vu.mutation.SetLastHeartbeatAt(v)
	}
	if _, ok := vu.mutation.UpdatedAt(); !ok {
		v := v2agents.UpdateDefaultUpdatedAt()
		vu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vu *V2AgentsUpdate) check() error {
	if v, ok := vu.mutation.Status(); ok {
		if err := v2agents.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "V2Agents.status": %w`, err)}
		}
	}
	return nil
}

func (vu *V2AgentsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := vu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(v2agents.Table, v2agents.Columns, sqlgraph.NewFieldSpec(v2agents.FieldID, field.TypeUUID))
	if ps := vu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vu.mutation.Status(); ok {
		_spec.SetField(v2agents.FieldStatus, field.TypeString, value)
	}
	if value, ok := vu.mutation.LastHeartbeatAt(); ok {
		_spec.SetField(v2agents.FieldLastHeartbeatAt, field.TypeTime, value)
	}
	if vu.mutation.LastHeartbeatAtCleared() {
		_spec.ClearField(v2agents.FieldLastHeartbeatAt, field.TypeTime)
	}
	if value, ok := vu.mutation.UpdatedAt(); ok {
		_spec.SetField(v2agents.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{v2agents.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vu.mutation.done = true
	return n, nil
}

// V2AgentsUpdateOne is the builder for updating a single V2Agents entity.
type V2AgentsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *V2AgentsMutation
}

// SetStatus sets the "status" field.
func (vuo *V2AgentsUpdateOne) SetStatus(s string) *V2AgentsUpdateOne {
	vuo.mutation.SetStatus(s)
	return vuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (vuo *V2AgentsUpdateOne) SetNillableStatus(s *string) *V2AgentsUpdateOne {
	if s != nil {
		vuo.SetStatus(*s)
	}
	return vuo
}

// SetLastHeartbeatAt sets the "last_heartbeat_at" field.
func (vuo *V2AgentsUpdateOne) SetLastHeartbeatAt(t time.Time) *V2AgentsUpdateOne {
	vuo.mutation.SetLastHeartbeatAt(t)
	return vuo
}

// ClearLastHeartbeatAt clears the value of the "last_heartbeat_at" field.
func (vuo *V2AgentsUpdateOne) ClearLastHeartbeatAt() *V2AgentsUpdateOne {
	vuo.mutation.ClearLastHeartbeatAt()
	return vuo
}

// SetUpdatedAt sets the "updated_at" field.
func (vuo *V2AgentsUpdateOne) SetUpdatedAt(t time.Time) *V2AgentsUpdateOne {
	vuo.mutation.SetUpdatedAt(t)
	return vuo
}

// Mutation returns the V2AgentsMutation object of the builder.
func (vuo *V2AgentsUpdateOne) Mutation() *V2AgentsMutation {
	return vuo.mutation
}

// Where appends a list predicates to the V2AgentsUpdate builder.
func (vuo *V2AgentsUpdateOne) Where(ps ...predicate.V2Agents) *V2AgentsUpdateOne {
	vuo.mutation.Where(ps...)
	return vuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vuo *V2AgentsUpdateOne) Select(field string, fields ...string) *V2AgentsUpdateOne {
	vuo.fields = append([]string{field}, fields...)
	return vuo
}

// Save executes the query and returns the updated V2Agents entity.
func (vuo *V2AgentsUpdateOne) Save(ctx context.Context) (*V2Agents, error) {
	vuo.defaults()
	return withHooks(ctx, vuo.sqlSave, vuo.mutation, vuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vuo *V2AgentsUpdateOne) SaveX(ctx context.Context) *V2Agents {
	node, err := vuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vuo *V2AgentsUpdateOne) Exec(ctx context.Context) error {
	_, err := vuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vuo *V2AgentsUpdateOne) ExecX(ctx context.Context) {
	if err := vuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vuo *V2AgentsUpdateOne) defaults() {
	if _, ok := vuo.mutation.LastHeartbeatAt(); !ok && !vuo.mutation.LastHeartbeatAtCleared() {
		v := v2agents.UpdateDefaultLastHeartbeatAt()
		vuo.mutation.SetLastHeartbeatAt(v)
	}
	if _, ok := vuo.mutation.UpdatedAt(); !ok {
		v := v2agents.UpdateDefaultUpdatedAt()
		vuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vuo *V2AgentsUpdateOne) check() error {
	if v, ok := vuo.mutation.Status(); ok {
		if err := v2agents.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "V2Agents.status": %w`, err)}
		}
	}
	return nil
}

func (vuo *V2AgentsUpdateOne) sqlSave(ctx context.Context) (_node *V2Agents, err error) {
	if err := vuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(v2agents.Table, v2agents.Columns, sqlgraph.NewFieldSpec(v2agents.FieldID, field.TypeUUID))
	id, ok := vuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "V2Agents.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, v2agents.FieldID)
		for _, f := range fields {
			if !v2agents.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != v2agents.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vuo.mutation.Status(); ok {
		_spec.SetField(v2agents.FieldStatus, field.TypeString, value)
	}
	if value, ok := vuo.mutation.LastHeartbeatAt(); ok {
		_spec.SetField(v2agents.FieldLastHeartbeatAt, field.TypeTime, value)
	}
	if vuo.mutation.LastHeartbeatAtCleared() {
		_spec.ClearField(v2agents.FieldLastHeartbeatAt, field.TypeTime)
	}
	if value, ok := vuo.mutation.UpdatedAt(); ok {
		_spec.SetField(v2agents.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &V2Agents{config: vuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{v2agents.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vuo.mutation.done = true
	return _node, nil
}
