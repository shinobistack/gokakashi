// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/shinobistack/gokakashi/ent/v2agenttasks"
)

// V2AgentTasksCreate is the builder for creating a V2AgentTasks entity.
type V2AgentTasksCreate struct {
	config
	mutation *V2AgentTasksMutation
	hooks    []Hook
}

// SetAgentID sets the "agent_id" field.
func (vtc *V2AgentTasksCreate) SetAgentID(u uuid.UUID) *V2AgentTasksCreate {
	vtc.mutation.SetAgentID(u)
	return vtc
}

// SetScanID sets the "scan_id" field.
func (vtc *V2AgentTasksCreate) SetScanID(u uuid.UUID) *V2AgentTasksCreate {
	vtc.mutation.SetScanID(u)
	return vtc
}

// SetStatus sets the "status" field.
func (vtc *V2AgentTasksCreate) SetStatus(s string) *V2AgentTasksCreate {
	vtc.mutation.SetStatus(s)
	return vtc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (vtc *V2AgentTasksCreate) SetNillableStatus(s *string) *V2AgentTasksCreate {
	if s != nil {
		vtc.SetStatus(*s)
	}
	return vtc
}

// SetCreatedAt sets the "created_at" field.
func (vtc *V2AgentTasksCreate) SetCreatedAt(t time.Time) *V2AgentTasksCreate {
	vtc.mutation.SetCreatedAt(t)
	return vtc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (vtc *V2AgentTasksCreate) SetNillableCreatedAt(t *time.Time) *V2AgentTasksCreate {
	if t != nil {
		vtc.SetCreatedAt(*t)
	}
	return vtc
}

// SetUpdatedAt sets the "updated_at" field.
func (vtc *V2AgentTasksCreate) SetUpdatedAt(t time.Time) *V2AgentTasksCreate {
	vtc.mutation.SetUpdatedAt(t)
	return vtc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (vtc *V2AgentTasksCreate) SetNillableUpdatedAt(t *time.Time) *V2AgentTasksCreate {
	if t != nil {
		vtc.SetUpdatedAt(*t)
	}
	return vtc
}

// SetID sets the "id" field.
func (vtc *V2AgentTasksCreate) SetID(u uuid.UUID) *V2AgentTasksCreate {
	vtc.mutation.SetID(u)
	return vtc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (vtc *V2AgentTasksCreate) SetNillableID(u *uuid.UUID) *V2AgentTasksCreate {
	if u != nil {
		vtc.SetID(*u)
	}
	return vtc
}

// Mutation returns the V2AgentTasksMutation object of the builder.
func (vtc *V2AgentTasksCreate) Mutation() *V2AgentTasksMutation {
	return vtc.mutation
}

// Save creates the V2AgentTasks in the database.
func (vtc *V2AgentTasksCreate) Save(ctx context.Context) (*V2AgentTasks, error) {
	vtc.defaults()
	return withHooks(ctx, vtc.sqlSave, vtc.mutation, vtc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (vtc *V2AgentTasksCreate) SaveX(ctx context.Context) *V2AgentTasks {
	v, err := vtc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vtc *V2AgentTasksCreate) Exec(ctx context.Context) error {
	_, err := vtc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vtc *V2AgentTasksCreate) ExecX(ctx context.Context) {
	if err := vtc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vtc *V2AgentTasksCreate) defaults() {
	if _, ok := vtc.mutation.Status(); !ok {
		v := v2agenttasks.DefaultStatus
		vtc.mutation.SetStatus(v)
	}
	if _, ok := vtc.mutation.CreatedAt(); !ok {
		v := v2agenttasks.DefaultCreatedAt()
		vtc.mutation.SetCreatedAt(v)
	}
	if _, ok := vtc.mutation.UpdatedAt(); !ok {
		v := v2agenttasks.DefaultUpdatedAt()
		vtc.mutation.SetUpdatedAt(v)
	}
	if _, ok := vtc.mutation.ID(); !ok {
		v := v2agenttasks.DefaultID()
		vtc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vtc *V2AgentTasksCreate) check() error {
	if _, ok := vtc.mutation.AgentID(); !ok {
		return &ValidationError{Name: "agent_id", err: errors.New(`ent: missing required field "V2AgentTasks.agent_id"`)}
	}
	if _, ok := vtc.mutation.ScanID(); !ok {
		return &ValidationError{Name: "scan_id", err: errors.New(`ent: missing required field "V2AgentTasks.scan_id"`)}
	}
	if _, ok := vtc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "V2AgentTasks.status"`)}
	}
	if v, ok := vtc.mutation.Status(); ok {
		if err := v2agenttasks.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "V2AgentTasks.status": %w`, err)}
		}
	}
	if _, ok := vtc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "V2AgentTasks.created_at"`)}
	}
	if _, ok := vtc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "V2AgentTasks.updated_at"`)}
	}
	return nil
}

func (vtc *V2AgentTasksCreate) sqlSave(ctx context.Context) (*V2AgentTasks, error) {
	if err := vtc.check(); err != nil {
		return nil, err
	}
	_node, _spec := vtc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vtc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	vtc.mutation.id = &_node.ID
	vtc.mutation.done = true
	return _node, nil
}

func (vtc *V2AgentTasksCreate) createSpec() (*V2AgentTasks, *sqlgraph.CreateSpec) {
	var (
		_node = &V2AgentTasks{config: vtc.config}
		_spec = sqlgraph.NewCreateSpec(v2agenttasks.Table, sqlgraph.NewFieldSpec(v2agenttasks.FieldID, field.TypeUUID))
	)
	if id, ok := vtc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := vtc.mutation.AgentID(); ok {
		_spec.SetField(v2agenttasks.FieldAgentID, field.TypeUUID, value)
		_node.AgentID = value
	}
	if value, ok := vtc.mutation.ScanID(); ok {
		_spec.SetField(v2agenttasks.FieldScanID, field.TypeUUID, value)
		_node.ScanID = value
	}
	if value, ok := vtc.mutation.Status(); ok {
		_spec.SetField(v2agenttasks.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := vtc.mutation.CreatedAt(); ok {
		_spec.SetField(v2agenttasks.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := vtc.mutation.UpdatedAt(); ok {
		_spec.SetField(v2agenttasks.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// V2AgentTasksCreateBulk is the builder for creating many V2AgentTasks entities in bulk.
type V2AgentTasksCreateBulk struct {
	config
	err      error
	builders []*V2AgentTasksCreate
}

// Save creates the V2AgentTasks entities in the database.
func (vtcb *V2AgentTasksCreateBulk) Save(ctx context.Context) ([]*V2AgentTasks, error) {
	if vtcb.err != nil {
		return nil, vtcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(vtcb.builders))
	nodes := make([]*V2AgentTasks, len(vtcb.builders))
	mutators := make([]Mutator, len(vtcb.builders))
	for i := range vtcb.builders {
		func(i int, root context.Context) {
			builder := vtcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*V2AgentTasksMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vtcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vtcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vtcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vtcb *V2AgentTasksCreateBulk) SaveX(ctx context.Context) []*V2AgentTasks {
	v, err := vtcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vtcb *V2AgentTasksCreateBulk) Exec(ctx context.Context) error {
	_, err := vtcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vtcb *V2AgentTasksCreateBulk) ExecX(ctx context.Context) {
	if err := vtcb.Exec(ctx); err != nil {
		panic(err)
	}
}
