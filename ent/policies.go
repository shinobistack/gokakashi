// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/shinobistack/gokakashi/ent/policies"
	"github.com/shinobistack/gokakashi/ent/schema"
)

// Policies is the model entity for the Policies schema.
type Policies struct {
	config `json:"-"`
	// ID of the ent.
	// Primary key, unique identifier.
	ID uuid.UUID `json:"id,omitempty"`
	// Policy name.
	Name string `json:"name,omitempty"`
	// Stores image details like registry, tags.
	Image schema.Image `json:"image,omitempty"`
	// Scanners like Trivy.
	Scanner string `json:"scanner,omitempty"`
	// Policies labels key:value
	Labels schema.PolicyLabels `json:"labels,omitempty"`
	// Stores trigger details (e.g., cron schedule).
	Trigger map[string]interface{} `json:"trigger,omitempty"`
	// Stores conditions for evaluation.
	Check schema.Check `json:"check,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PoliciesQuery when eager-loading is set.
	Edges        PoliciesEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PoliciesEdges holds the relations/edges for other nodes in the graph.
type PoliciesEdges struct {
	// PolicyLabels holds the value of the policy_labels edge.
	PolicyLabels []*PolicyLabels `json:"policy_labels,omitempty"`
	// Scans holds the value of the scans edge.
	Scans []*Scans `json:"scans,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// PolicyLabelsOrErr returns the PolicyLabels value or an error if the edge
// was not loaded in eager-loading.
func (e PoliciesEdges) PolicyLabelsOrErr() ([]*PolicyLabels, error) {
	if e.loadedTypes[0] {
		return e.PolicyLabels, nil
	}
	return nil, &NotLoadedError{edge: "policy_labels"}
}

// ScansOrErr returns the Scans value or an error if the edge
// was not loaded in eager-loading.
func (e PoliciesEdges) ScansOrErr() ([]*Scans, error) {
	if e.loadedTypes[1] {
		return e.Scans, nil
	}
	return nil, &NotLoadedError{edge: "scans"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Policies) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case policies.FieldImage, policies.FieldLabels, policies.FieldTrigger, policies.FieldCheck:
			values[i] = new([]byte)
		case policies.FieldName, policies.FieldScanner:
			values[i] = new(sql.NullString)
		case policies.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Policies fields.
func (po *Policies) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case policies.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				po.ID = *value
			}
		case policies.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				po.Name = value.String
			}
		case policies.FieldImage:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field image", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &po.Image); err != nil {
					return fmt.Errorf("unmarshal field image: %w", err)
				}
			}
		case policies.FieldScanner:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field scanner", values[i])
			} else if value.Valid {
				po.Scanner = value.String
			}
		case policies.FieldLabels:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field labels", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &po.Labels); err != nil {
					return fmt.Errorf("unmarshal field labels: %w", err)
				}
			}
		case policies.FieldTrigger:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field trigger", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &po.Trigger); err != nil {
					return fmt.Errorf("unmarshal field trigger: %w", err)
				}
			}
		case policies.FieldCheck:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field check", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &po.Check); err != nil {
					return fmt.Errorf("unmarshal field check: %w", err)
				}
			}
		default:
			po.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Policies.
// This includes values selected through modifiers, order, etc.
func (po *Policies) Value(name string) (ent.Value, error) {
	return po.selectValues.Get(name)
}

// QueryPolicyLabels queries the "policy_labels" edge of the Policies entity.
func (po *Policies) QueryPolicyLabels() *PolicyLabelsQuery {
	return NewPoliciesClient(po.config).QueryPolicyLabels(po)
}

// QueryScans queries the "scans" edge of the Policies entity.
func (po *Policies) QueryScans() *ScansQuery {
	return NewPoliciesClient(po.config).QueryScans(po)
}

// Update returns a builder for updating this Policies.
// Note that you need to call Policies.Unwrap() before calling this method if this Policies
// was returned from a transaction, and the transaction was committed or rolled back.
func (po *Policies) Update() *PoliciesUpdateOne {
	return NewPoliciesClient(po.config).UpdateOne(po)
}

// Unwrap unwraps the Policies entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (po *Policies) Unwrap() *Policies {
	_tx, ok := po.config.driver.(*txDriver)
	if !ok {
		panic("ent: Policies is not a transactional entity")
	}
	po.config.driver = _tx.drv
	return po
}

// String implements the fmt.Stringer.
func (po *Policies) String() string {
	var builder strings.Builder
	builder.WriteString("Policies(")
	builder.WriteString(fmt.Sprintf("id=%v, ", po.ID))
	builder.WriteString("name=")
	builder.WriteString(po.Name)
	builder.WriteString(", ")
	builder.WriteString("image=")
	builder.WriteString(fmt.Sprintf("%v", po.Image))
	builder.WriteString(", ")
	builder.WriteString("scanner=")
	builder.WriteString(po.Scanner)
	builder.WriteString(", ")
	builder.WriteString("labels=")
	builder.WriteString(fmt.Sprintf("%v", po.Labels))
	builder.WriteString(", ")
	builder.WriteString("trigger=")
	builder.WriteString(fmt.Sprintf("%v", po.Trigger))
	builder.WriteString(", ")
	builder.WriteString("check=")
	builder.WriteString(fmt.Sprintf("%v", po.Check))
	builder.WriteByte(')')
	return builder.String()
}

// PoliciesSlice is a parsable slice of Policies.
type PoliciesSlice []*Policies
