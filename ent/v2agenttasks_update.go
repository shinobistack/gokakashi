// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/shinobistack/gokakashi/ent/predicate"
	"github.com/shinobistack/gokakashi/ent/v2agenttasks"
)

// V2AgentTasksUpdate is the builder for updating V2AgentTasks entities.
type V2AgentTasksUpdate struct {
	config
	hooks    []Hook
	mutation *V2AgentTasksMutation
}

// Where appends a list predicates to the V2AgentTasksUpdate builder.
func (vtu *V2AgentTasksUpdate) Where(ps ...predicate.V2AgentTasks) *V2AgentTasksUpdate {
	vtu.mutation.Where(ps...)
	return vtu
}

// SetAgentID sets the "agent_id" field.
func (vtu *V2AgentTasksUpdate) SetAgentID(u uuid.UUID) *V2AgentTasksUpdate {
	vtu.mutation.SetAgentID(u)
	return vtu
}

// SetNillableAgentID sets the "agent_id" field if the given value is not nil.
func (vtu *V2AgentTasksUpdate) SetNillableAgentID(u *uuid.UUID) *V2AgentTasksUpdate {
	if u != nil {
		vtu.SetAgentID(*u)
	}
	return vtu
}

// SetScanID sets the "scan_id" field.
func (vtu *V2AgentTasksUpdate) SetScanID(u uuid.UUID) *V2AgentTasksUpdate {
	vtu.mutation.SetScanID(u)
	return vtu
}

// SetNillableScanID sets the "scan_id" field if the given value is not nil.
func (vtu *V2AgentTasksUpdate) SetNillableScanID(u *uuid.UUID) *V2AgentTasksUpdate {
	if u != nil {
		vtu.SetScanID(*u)
	}
	return vtu
}

// SetStatus sets the "status" field.
func (vtu *V2AgentTasksUpdate) SetStatus(s string) *V2AgentTasksUpdate {
	vtu.mutation.SetStatus(s)
	return vtu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (vtu *V2AgentTasksUpdate) SetNillableStatus(s *string) *V2AgentTasksUpdate {
	if s != nil {
		vtu.SetStatus(*s)
	}
	return vtu
}

// SetUpdatedAt sets the "updated_at" field.
func (vtu *V2AgentTasksUpdate) SetUpdatedAt(t time.Time) *V2AgentTasksUpdate {
	vtu.mutation.SetUpdatedAt(t)
	return vtu
}

// Mutation returns the V2AgentTasksMutation object of the builder.
func (vtu *V2AgentTasksUpdate) Mutation() *V2AgentTasksMutation {
	return vtu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vtu *V2AgentTasksUpdate) Save(ctx context.Context) (int, error) {
	vtu.defaults()
	return withHooks(ctx, vtu.sqlSave, vtu.mutation, vtu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vtu *V2AgentTasksUpdate) SaveX(ctx context.Context) int {
	affected, err := vtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vtu *V2AgentTasksUpdate) Exec(ctx context.Context) error {
	_, err := vtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vtu *V2AgentTasksUpdate) ExecX(ctx context.Context) {
	if err := vtu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vtu *V2AgentTasksUpdate) defaults() {
	if _, ok := vtu.mutation.UpdatedAt(); !ok {
		v := v2agenttasks.UpdateDefaultUpdatedAt()
		vtu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vtu *V2AgentTasksUpdate) check() error {
	if v, ok := vtu.mutation.Status(); ok {
		if err := v2agenttasks.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "V2AgentTasks.status": %w`, err)}
		}
	}
	return nil
}

func (vtu *V2AgentTasksUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := vtu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(v2agenttasks.Table, v2agenttasks.Columns, sqlgraph.NewFieldSpec(v2agenttasks.FieldID, field.TypeUUID))
	if ps := vtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vtu.mutation.AgentID(); ok {
		_spec.SetField(v2agenttasks.FieldAgentID, field.TypeUUID, value)
	}
	if value, ok := vtu.mutation.ScanID(); ok {
		_spec.SetField(v2agenttasks.FieldScanID, field.TypeUUID, value)
	}
	if value, ok := vtu.mutation.Status(); ok {
		_spec.SetField(v2agenttasks.FieldStatus, field.TypeString, value)
	}
	if value, ok := vtu.mutation.UpdatedAt(); ok {
		_spec.SetField(v2agenttasks.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{v2agenttasks.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	vtu.mutation.done = true
	return n, nil
}

// V2AgentTasksUpdateOne is the builder for updating a single V2AgentTasks entity.
type V2AgentTasksUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *V2AgentTasksMutation
}

// SetAgentID sets the "agent_id" field.
func (vtuo *V2AgentTasksUpdateOne) SetAgentID(u uuid.UUID) *V2AgentTasksUpdateOne {
	vtuo.mutation.SetAgentID(u)
	return vtuo
}

// SetNillableAgentID sets the "agent_id" field if the given value is not nil.
func (vtuo *V2AgentTasksUpdateOne) SetNillableAgentID(u *uuid.UUID) *V2AgentTasksUpdateOne {
	if u != nil {
		vtuo.SetAgentID(*u)
	}
	return vtuo
}

// SetScanID sets the "scan_id" field.
func (vtuo *V2AgentTasksUpdateOne) SetScanID(u uuid.UUID) *V2AgentTasksUpdateOne {
	vtuo.mutation.SetScanID(u)
	return vtuo
}

// SetNillableScanID sets the "scan_id" field if the given value is not nil.
func (vtuo *V2AgentTasksUpdateOne) SetNillableScanID(u *uuid.UUID) *V2AgentTasksUpdateOne {
	if u != nil {
		vtuo.SetScanID(*u)
	}
	return vtuo
}

// SetStatus sets the "status" field.
func (vtuo *V2AgentTasksUpdateOne) SetStatus(s string) *V2AgentTasksUpdateOne {
	vtuo.mutation.SetStatus(s)
	return vtuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (vtuo *V2AgentTasksUpdateOne) SetNillableStatus(s *string) *V2AgentTasksUpdateOne {
	if s != nil {
		vtuo.SetStatus(*s)
	}
	return vtuo
}

// SetUpdatedAt sets the "updated_at" field.
func (vtuo *V2AgentTasksUpdateOne) SetUpdatedAt(t time.Time) *V2AgentTasksUpdateOne {
	vtuo.mutation.SetUpdatedAt(t)
	return vtuo
}

// Mutation returns the V2AgentTasksMutation object of the builder.
func (vtuo *V2AgentTasksUpdateOne) Mutation() *V2AgentTasksMutation {
	return vtuo.mutation
}

// Where appends a list predicates to the V2AgentTasksUpdate builder.
func (vtuo *V2AgentTasksUpdateOne) Where(ps ...predicate.V2AgentTasks) *V2AgentTasksUpdateOne {
	vtuo.mutation.Where(ps...)
	return vtuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vtuo *V2AgentTasksUpdateOne) Select(field string, fields ...string) *V2AgentTasksUpdateOne {
	vtuo.fields = append([]string{field}, fields...)
	return vtuo
}

// Save executes the query and returns the updated V2AgentTasks entity.
func (vtuo *V2AgentTasksUpdateOne) Save(ctx context.Context) (*V2AgentTasks, error) {
	vtuo.defaults()
	return withHooks(ctx, vtuo.sqlSave, vtuo.mutation, vtuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (vtuo *V2AgentTasksUpdateOne) SaveX(ctx context.Context) *V2AgentTasks {
	node, err := vtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vtuo *V2AgentTasksUpdateOne) Exec(ctx context.Context) error {
	_, err := vtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vtuo *V2AgentTasksUpdateOne) ExecX(ctx context.Context) {
	if err := vtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vtuo *V2AgentTasksUpdateOne) defaults() {
	if _, ok := vtuo.mutation.UpdatedAt(); !ok {
		v := v2agenttasks.UpdateDefaultUpdatedAt()
		vtuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vtuo *V2AgentTasksUpdateOne) check() error {
	if v, ok := vtuo.mutation.Status(); ok {
		if err := v2agenttasks.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "V2AgentTasks.status": %w`, err)}
		}
	}
	return nil
}

func (vtuo *V2AgentTasksUpdateOne) sqlSave(ctx context.Context) (_node *V2AgentTasks, err error) {
	if err := vtuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(v2agenttasks.Table, v2agenttasks.Columns, sqlgraph.NewFieldSpec(v2agenttasks.FieldID, field.TypeUUID))
	id, ok := vtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "V2AgentTasks.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vtuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, v2agenttasks.FieldID)
		for _, f := range fields {
			if !v2agenttasks.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != v2agenttasks.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vtuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vtuo.mutation.AgentID(); ok {
		_spec.SetField(v2agenttasks.FieldAgentID, field.TypeUUID, value)
	}
	if value, ok := vtuo.mutation.ScanID(); ok {
		_spec.SetField(v2agenttasks.FieldScanID, field.TypeUUID, value)
	}
	if value, ok := vtuo.mutation.Status(); ok {
		_spec.SetField(v2agenttasks.FieldStatus, field.TypeString, value)
	}
	if value, ok := vtuo.mutation.UpdatedAt(); ok {
		_spec.SetField(v2agenttasks.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &V2AgentTasks{config: vtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{v2agenttasks.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	vtuo.mutation.done = true
	return _node, nil
}
