// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/shinobistack/gokakashi/ent/agentsv2"
)

// AgentsV2Create is the builder for creating a AgentsV2 entity.
type AgentsV2Create struct {
	config
	mutation *AgentsV2Mutation
	hooks    []Hook
}

// SetStatus sets the "status" field.
func (av *AgentsV2Create) SetStatus(s string) *AgentsV2Create {
	av.mutation.SetStatus(s)
	return av
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (av *AgentsV2Create) SetNillableStatus(s *string) *AgentsV2Create {
	if s != nil {
		av.SetStatus(*s)
	}
	return av
}

// SetLastHeartbeatAt sets the "last_heartbeat_at" field.
func (av *AgentsV2Create) SetLastHeartbeatAt(t time.Time) *AgentsV2Create {
	av.mutation.SetLastHeartbeatAt(t)
	return av
}

// SetNillableLastHeartbeatAt sets the "last_heartbeat_at" field if the given value is not nil.
func (av *AgentsV2Create) SetNillableLastHeartbeatAt(t *time.Time) *AgentsV2Create {
	if t != nil {
		av.SetLastHeartbeatAt(*t)
	}
	return av
}

// SetCreatedAt sets the "created_at" field.
func (av *AgentsV2Create) SetCreatedAt(t time.Time) *AgentsV2Create {
	av.mutation.SetCreatedAt(t)
	return av
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (av *AgentsV2Create) SetNillableCreatedAt(t *time.Time) *AgentsV2Create {
	if t != nil {
		av.SetCreatedAt(*t)
	}
	return av
}

// SetUpdatedAt sets the "updated_at" field.
func (av *AgentsV2Create) SetUpdatedAt(t time.Time) *AgentsV2Create {
	av.mutation.SetUpdatedAt(t)
	return av
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (av *AgentsV2Create) SetNillableUpdatedAt(t *time.Time) *AgentsV2Create {
	if t != nil {
		av.SetUpdatedAt(*t)
	}
	return av
}

// SetID sets the "id" field.
func (av *AgentsV2Create) SetID(u uuid.UUID) *AgentsV2Create {
	av.mutation.SetID(u)
	return av
}

// SetNillableID sets the "id" field if the given value is not nil.
func (av *AgentsV2Create) SetNillableID(u *uuid.UUID) *AgentsV2Create {
	if u != nil {
		av.SetID(*u)
	}
	return av
}

// Mutation returns the AgentsV2Mutation object of the builder.
func (av *AgentsV2Create) Mutation() *AgentsV2Mutation {
	return av.mutation
}

// Save creates the AgentsV2 in the database.
func (av *AgentsV2Create) Save(ctx context.Context) (*AgentsV2, error) {
	av.defaults()
	return withHooks(ctx, av.sqlSave, av.mutation, av.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (av *AgentsV2Create) SaveX(ctx context.Context) *AgentsV2 {
	v, err := av.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (av *AgentsV2Create) Exec(ctx context.Context) error {
	_, err := av.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (av *AgentsV2Create) ExecX(ctx context.Context) {
	if err := av.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (av *AgentsV2Create) defaults() {
	if _, ok := av.mutation.Status(); !ok {
		v := agentsv2.DefaultStatus
		av.mutation.SetStatus(v)
	}
	if _, ok := av.mutation.LastHeartbeatAt(); !ok {
		v := agentsv2.DefaultLastHeartbeatAt()
		av.mutation.SetLastHeartbeatAt(v)
	}
	if _, ok := av.mutation.CreatedAt(); !ok {
		v := agentsv2.DefaultCreatedAt()
		av.mutation.SetCreatedAt(v)
	}
	if _, ok := av.mutation.UpdatedAt(); !ok {
		v := agentsv2.DefaultUpdatedAt()
		av.mutation.SetUpdatedAt(v)
	}
	if _, ok := av.mutation.ID(); !ok {
		v := agentsv2.DefaultID()
		av.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (av *AgentsV2Create) check() error {
	if _, ok := av.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "AgentsV2.status"`)}
	}
	if v, ok := av.mutation.Status(); ok {
		if err := agentsv2.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "AgentsV2.status": %w`, err)}
		}
	}
	if _, ok := av.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "AgentsV2.created_at"`)}
	}
	if _, ok := av.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "AgentsV2.updated_at"`)}
	}
	return nil
}

func (av *AgentsV2Create) sqlSave(ctx context.Context) (*AgentsV2, error) {
	if err := av.check(); err != nil {
		return nil, err
	}
	_node, _spec := av.createSpec()
	if err := sqlgraph.CreateNode(ctx, av.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	av.mutation.id = &_node.ID
	av.mutation.done = true
	return _node, nil
}

func (av *AgentsV2Create) createSpec() (*AgentsV2, *sqlgraph.CreateSpec) {
	var (
		_node = &AgentsV2{config: av.config}
		_spec = sqlgraph.NewCreateSpec(agentsv2.Table, sqlgraph.NewFieldSpec(agentsv2.FieldID, field.TypeUUID))
	)
	if id, ok := av.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := av.mutation.Status(); ok {
		_spec.SetField(agentsv2.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := av.mutation.LastHeartbeatAt(); ok {
		_spec.SetField(agentsv2.FieldLastHeartbeatAt, field.TypeTime, value)
		_node.LastHeartbeatAt = value
	}
	if value, ok := av.mutation.CreatedAt(); ok {
		_spec.SetField(agentsv2.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := av.mutation.UpdatedAt(); ok {
		_spec.SetField(agentsv2.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// AgentsV2CreateBulk is the builder for creating many AgentsV2 entities in bulk.
type AgentsV2CreateBulk struct {
	config
	err      error
	builders []*AgentsV2Create
}

// Save creates the AgentsV2 entities in the database.
func (avb *AgentsV2CreateBulk) Save(ctx context.Context) ([]*AgentsV2, error) {
	if avb.err != nil {
		return nil, avb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(avb.builders))
	nodes := make([]*AgentsV2, len(avb.builders))
	mutators := make([]Mutator, len(avb.builders))
	for i := range avb.builders {
		func(i int, root context.Context) {
			builder := avb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AgentsV2Mutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, avb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, avb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, avb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (avb *AgentsV2CreateBulk) SaveX(ctx context.Context) []*AgentsV2 {
	v, err := avb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (avb *AgentsV2CreateBulk) Exec(ctx context.Context) error {
	_, err := avb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (avb *AgentsV2CreateBulk) ExecX(ctx context.Context) {
	if err := avb.Exec(ctx); err != nil {
		panic(err)
	}
}
