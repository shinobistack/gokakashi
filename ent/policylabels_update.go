// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/shinobistack/gokakashi/ent/policies"
	"github.com/shinobistack/gokakashi/ent/policylabels"
	"github.com/shinobistack/gokakashi/ent/predicate"
)

// PolicyLabelsUpdate is the builder for updating PolicyLabels entities.
type PolicyLabelsUpdate struct {
	config
	hooks    []Hook
	mutation *PolicyLabelsMutation
}

// Where appends a list predicates to the PolicyLabelsUpdate builder.
func (plu *PolicyLabelsUpdate) Where(ps ...predicate.PolicyLabels) *PolicyLabelsUpdate {
	plu.mutation.Where(ps...)
	return plu
}

// SetPolicyID sets the "policy_id" field.
func (plu *PolicyLabelsUpdate) SetPolicyID(u uuid.UUID) *PolicyLabelsUpdate {
	plu.mutation.SetPolicyID(u)
	return plu
}

// SetNillablePolicyID sets the "policy_id" field if the given value is not nil.
func (plu *PolicyLabelsUpdate) SetNillablePolicyID(u *uuid.UUID) *PolicyLabelsUpdate {
	if u != nil {
		plu.SetPolicyID(*u)
	}
	return plu
}

// SetKey sets the "key" field.
func (plu *PolicyLabelsUpdate) SetKey(s string) *PolicyLabelsUpdate {
	plu.mutation.SetKey(s)
	return plu
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (plu *PolicyLabelsUpdate) SetNillableKey(s *string) *PolicyLabelsUpdate {
	if s != nil {
		plu.SetKey(*s)
	}
	return plu
}

// SetValue sets the "value" field.
func (plu *PolicyLabelsUpdate) SetValue(s string) *PolicyLabelsUpdate {
	plu.mutation.SetValue(s)
	return plu
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (plu *PolicyLabelsUpdate) SetNillableValue(s *string) *PolicyLabelsUpdate {
	if s != nil {
		plu.SetValue(*s)
	}
	return plu
}

// SetPolicy sets the "policy" edge to the Policies entity.
func (plu *PolicyLabelsUpdate) SetPolicy(p *Policies) *PolicyLabelsUpdate {
	return plu.SetPolicyID(p.ID)
}

// Mutation returns the PolicyLabelsMutation object of the builder.
func (plu *PolicyLabelsUpdate) Mutation() *PolicyLabelsMutation {
	return plu.mutation
}

// ClearPolicy clears the "policy" edge to the Policies entity.
func (plu *PolicyLabelsUpdate) ClearPolicy() *PolicyLabelsUpdate {
	plu.mutation.ClearPolicy()
	return plu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (plu *PolicyLabelsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, plu.sqlSave, plu.mutation, plu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (plu *PolicyLabelsUpdate) SaveX(ctx context.Context) int {
	affected, err := plu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (plu *PolicyLabelsUpdate) Exec(ctx context.Context) error {
	_, err := plu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (plu *PolicyLabelsUpdate) ExecX(ctx context.Context) {
	if err := plu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (plu *PolicyLabelsUpdate) check() error {
	if v, ok := plu.mutation.Key(); ok {
		if err := policylabels.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`ent: validator failed for field "PolicyLabels.key": %w`, err)}
		}
	}
	if v, ok := plu.mutation.Value(); ok {
		if err := policylabels.ValueValidator(v); err != nil {
			return &ValidationError{Name: "value", err: fmt.Errorf(`ent: validator failed for field "PolicyLabels.value": %w`, err)}
		}
	}
	if plu.mutation.PolicyCleared() && len(plu.mutation.PolicyIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PolicyLabels.policy"`)
	}
	return nil
}

func (plu *PolicyLabelsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := plu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(policylabels.Table, policylabels.Columns, sqlgraph.NewFieldSpec(policylabels.FieldID, field.TypeInt))
	if ps := plu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := plu.mutation.Key(); ok {
		_spec.SetField(policylabels.FieldKey, field.TypeString, value)
	}
	if value, ok := plu.mutation.Value(); ok {
		_spec.SetField(policylabels.FieldValue, field.TypeString, value)
	}
	if plu.mutation.PolicyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   policylabels.PolicyTable,
			Columns: []string{policylabels.PolicyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(policies.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := plu.mutation.PolicyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   policylabels.PolicyTable,
			Columns: []string{policylabels.PolicyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(policies.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, plu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{policylabels.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	plu.mutation.done = true
	return n, nil
}

// PolicyLabelsUpdateOne is the builder for updating a single PolicyLabels entity.
type PolicyLabelsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PolicyLabelsMutation
}

// SetPolicyID sets the "policy_id" field.
func (pluo *PolicyLabelsUpdateOne) SetPolicyID(u uuid.UUID) *PolicyLabelsUpdateOne {
	pluo.mutation.SetPolicyID(u)
	return pluo
}

// SetNillablePolicyID sets the "policy_id" field if the given value is not nil.
func (pluo *PolicyLabelsUpdateOne) SetNillablePolicyID(u *uuid.UUID) *PolicyLabelsUpdateOne {
	if u != nil {
		pluo.SetPolicyID(*u)
	}
	return pluo
}

// SetKey sets the "key" field.
func (pluo *PolicyLabelsUpdateOne) SetKey(s string) *PolicyLabelsUpdateOne {
	pluo.mutation.SetKey(s)
	return pluo
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (pluo *PolicyLabelsUpdateOne) SetNillableKey(s *string) *PolicyLabelsUpdateOne {
	if s != nil {
		pluo.SetKey(*s)
	}
	return pluo
}

// SetValue sets the "value" field.
func (pluo *PolicyLabelsUpdateOne) SetValue(s string) *PolicyLabelsUpdateOne {
	pluo.mutation.SetValue(s)
	return pluo
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (pluo *PolicyLabelsUpdateOne) SetNillableValue(s *string) *PolicyLabelsUpdateOne {
	if s != nil {
		pluo.SetValue(*s)
	}
	return pluo
}

// SetPolicy sets the "policy" edge to the Policies entity.
func (pluo *PolicyLabelsUpdateOne) SetPolicy(p *Policies) *PolicyLabelsUpdateOne {
	return pluo.SetPolicyID(p.ID)
}

// Mutation returns the PolicyLabelsMutation object of the builder.
func (pluo *PolicyLabelsUpdateOne) Mutation() *PolicyLabelsMutation {
	return pluo.mutation
}

// ClearPolicy clears the "policy" edge to the Policies entity.
func (pluo *PolicyLabelsUpdateOne) ClearPolicy() *PolicyLabelsUpdateOne {
	pluo.mutation.ClearPolicy()
	return pluo
}

// Where appends a list predicates to the PolicyLabelsUpdate builder.
func (pluo *PolicyLabelsUpdateOne) Where(ps ...predicate.PolicyLabels) *PolicyLabelsUpdateOne {
	pluo.mutation.Where(ps...)
	return pluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pluo *PolicyLabelsUpdateOne) Select(field string, fields ...string) *PolicyLabelsUpdateOne {
	pluo.fields = append([]string{field}, fields...)
	return pluo
}

// Save executes the query and returns the updated PolicyLabels entity.
func (pluo *PolicyLabelsUpdateOne) Save(ctx context.Context) (*PolicyLabels, error) {
	return withHooks(ctx, pluo.sqlSave, pluo.mutation, pluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pluo *PolicyLabelsUpdateOne) SaveX(ctx context.Context) *PolicyLabels {
	node, err := pluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pluo *PolicyLabelsUpdateOne) Exec(ctx context.Context) error {
	_, err := pluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pluo *PolicyLabelsUpdateOne) ExecX(ctx context.Context) {
	if err := pluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pluo *PolicyLabelsUpdateOne) check() error {
	if v, ok := pluo.mutation.Key(); ok {
		if err := policylabels.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`ent: validator failed for field "PolicyLabels.key": %w`, err)}
		}
	}
	if v, ok := pluo.mutation.Value(); ok {
		if err := policylabels.ValueValidator(v); err != nil {
			return &ValidationError{Name: "value", err: fmt.Errorf(`ent: validator failed for field "PolicyLabels.value": %w`, err)}
		}
	}
	if pluo.mutation.PolicyCleared() && len(pluo.mutation.PolicyIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PolicyLabels.policy"`)
	}
	return nil
}

func (pluo *PolicyLabelsUpdateOne) sqlSave(ctx context.Context) (_node *PolicyLabels, err error) {
	if err := pluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(policylabels.Table, policylabels.Columns, sqlgraph.NewFieldSpec(policylabels.FieldID, field.TypeInt))
	id, ok := pluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PolicyLabels.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, policylabels.FieldID)
		for _, f := range fields {
			if !policylabels.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != policylabels.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pluo.mutation.Key(); ok {
		_spec.SetField(policylabels.FieldKey, field.TypeString, value)
	}
	if value, ok := pluo.mutation.Value(); ok {
		_spec.SetField(policylabels.FieldValue, field.TypeString, value)
	}
	if pluo.mutation.PolicyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   policylabels.PolicyTable,
			Columns: []string{policylabels.PolicyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(policies.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pluo.mutation.PolicyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   policylabels.PolicyTable,
			Columns: []string{policylabels.PolicyColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(policies.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PolicyLabels{config: pluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{policylabels.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pluo.mutation.done = true
	return _node, nil
}
