// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/shinobistack/gokakashi/ent/policies"
	"github.com/shinobistack/gokakashi/ent/scans"
	"github.com/shinobistack/gokakashi/ent/schema"
)

// Scans is the model entity for the Scans schema.
type Scans struct {
	config `json:"-"`
	// ID of the ent.
	// Primary key, unique identifier.
	ID uuid.UUID `json:"id,omitempty"`
	// Foreign key to Policies.ID
	PolicyID uuid.UUID `json:"policy_id,omitempty"`
	// Enum: { scan_pending, scan_in_progress, check_pending, check_in_progress,  success, error }.
	Status string `json:"status,omitempty"`
	// Details of the image being scanned.
	Image string `json:"image,omitempty"`
	// Conditions checked during the scan.
	Check schema.Check `json:"check,omitempty"`
	// Stores the scan results or report.
	Report string `json:"report,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ScansQuery when eager-loading is set.
	Edges        ScansEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ScansEdges holds the relations/edges for other nodes in the graph.
type ScansEdges struct {
	// Policy holds the value of the policy edge.
	Policy *Policies `json:"policy,omitempty"`
	// ScanLabels holds the value of the scan_labels edge.
	ScanLabels []*ScanLabels `json:"scan_labels,omitempty"`
	// AgentTasks holds the value of the agent_tasks edge.
	AgentTasks []*AgentTasks `json:"agent_tasks,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// PolicyOrErr returns the Policy value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ScansEdges) PolicyOrErr() (*Policies, error) {
	if e.Policy != nil {
		return e.Policy, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: policies.Label}
	}
	return nil, &NotLoadedError{edge: "policy"}
}

// ScanLabelsOrErr returns the ScanLabels value or an error if the edge
// was not loaded in eager-loading.
func (e ScansEdges) ScanLabelsOrErr() ([]*ScanLabels, error) {
	if e.loadedTypes[1] {
		return e.ScanLabels, nil
	}
	return nil, &NotLoadedError{edge: "scan_labels"}
}

// AgentTasksOrErr returns the AgentTasks value or an error if the edge
// was not loaded in eager-loading.
func (e ScansEdges) AgentTasksOrErr() ([]*AgentTasks, error) {
	if e.loadedTypes[2] {
		return e.AgentTasks, nil
	}
	return nil, &NotLoadedError{edge: "agent_tasks"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Scans) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case scans.FieldCheck:
			values[i] = new([]byte)
		case scans.FieldStatus, scans.FieldImage, scans.FieldReport:
			values[i] = new(sql.NullString)
		case scans.FieldID, scans.FieldPolicyID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Scans fields.
func (s *Scans) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case scans.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				s.ID = *value
			}
		case scans.FieldPolicyID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field policy_id", values[i])
			} else if value != nil {
				s.PolicyID = *value
			}
		case scans.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				s.Status = value.String
			}
		case scans.FieldImage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field image", values[i])
			} else if value.Valid {
				s.Image = value.String
			}
		case scans.FieldCheck:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field check", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &s.Check); err != nil {
					return fmt.Errorf("unmarshal field check: %w", err)
				}
			}
		case scans.FieldReport:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field report", values[i])
			} else if value.Valid {
				s.Report = value.String
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Scans.
// This includes values selected through modifiers, order, etc.
func (s *Scans) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryPolicy queries the "policy" edge of the Scans entity.
func (s *Scans) QueryPolicy() *PoliciesQuery {
	return NewScansClient(s.config).QueryPolicy(s)
}

// QueryScanLabels queries the "scan_labels" edge of the Scans entity.
func (s *Scans) QueryScanLabels() *ScanLabelsQuery {
	return NewScansClient(s.config).QueryScanLabels(s)
}

// QueryAgentTasks queries the "agent_tasks" edge of the Scans entity.
func (s *Scans) QueryAgentTasks() *AgentTasksQuery {
	return NewScansClient(s.config).QueryAgentTasks(s)
}

// Update returns a builder for updating this Scans.
// Note that you need to call Scans.Unwrap() before calling this method if this Scans
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Scans) Update() *ScansUpdateOne {
	return NewScansClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Scans entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Scans) Unwrap() *Scans {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Scans is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Scans) String() string {
	var builder strings.Builder
	builder.WriteString("Scans(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("policy_id=")
	builder.WriteString(fmt.Sprintf("%v", s.PolicyID))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(s.Status)
	builder.WriteString(", ")
	builder.WriteString("image=")
	builder.WriteString(s.Image)
	builder.WriteString(", ")
	builder.WriteString("check=")
	builder.WriteString(fmt.Sprintf("%v", s.Check))
	builder.WriteString(", ")
	builder.WriteString("report=")
	builder.WriteString(s.Report)
	builder.WriteByte(')')
	return builder.String()
}

// ScansSlice is a parsable slice of Scans.
type ScansSlice []*Scans
