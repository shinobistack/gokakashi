// Code generated by ent, DO NOT EDIT.

package scans

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the scans type in the database.
	Label = "scans"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPolicyID holds the string denoting the policy_id field in the database.
	FieldPolicyID = "policy_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldImage holds the string denoting the image field in the database.
	FieldImage = "image"
	// FieldIntegrationID holds the string denoting the integration_id field in the database.
	FieldIntegrationID = "integration_id"
	// FieldScanner holds the string denoting the scanner field in the database.
	FieldScanner = "scanner"
	// FieldNotify holds the string denoting the notify field in the database.
	FieldNotify = "notify"
	// FieldLabels holds the string denoting the labels field in the database.
	FieldLabels = "labels"
	// FieldReport holds the string denoting the report field in the database.
	FieldReport = "report"
	// FieldScannerOptions holds the string denoting the scanner_options field in the database.
	FieldScannerOptions = "scanner_options"
	// EdgePolicy holds the string denoting the policy edge name in mutations.
	EdgePolicy = "policy"
	// EdgeIntegrations holds the string denoting the integrations edge name in mutations.
	EdgeIntegrations = "integrations"
	// EdgeScanLabels holds the string denoting the scan_labels edge name in mutations.
	EdgeScanLabels = "scan_labels"
	// EdgeAgentTasks holds the string denoting the agent_tasks edge name in mutations.
	EdgeAgentTasks = "agent_tasks"
	// EdgeScanNotifications holds the string denoting the scan_notifications edge name in mutations.
	EdgeScanNotifications = "scan_notifications"
	// Table holds the table name of the scans in the database.
	Table = "scans"
	// PolicyTable is the table that holds the policy relation/edge.
	PolicyTable = "scans"
	// PolicyInverseTable is the table name for the Policies entity.
	// It exists in this package in order to avoid circular dependency with the "policies" package.
	PolicyInverseTable = "policies"
	// PolicyColumn is the table column denoting the policy relation/edge.
	PolicyColumn = "policy_id"
	// IntegrationsTable is the table that holds the integrations relation/edge.
	IntegrationsTable = "scans"
	// IntegrationsInverseTable is the table name for the Integrations entity.
	// It exists in this package in order to avoid circular dependency with the "integrations" package.
	IntegrationsInverseTable = "integrations"
	// IntegrationsColumn is the table column denoting the integrations relation/edge.
	IntegrationsColumn = "integration_id"
	// ScanLabelsTable is the table that holds the scan_labels relation/edge.
	ScanLabelsTable = "scan_labels"
	// ScanLabelsInverseTable is the table name for the ScanLabels entity.
	// It exists in this package in order to avoid circular dependency with the "scanlabels" package.
	ScanLabelsInverseTable = "scan_labels"
	// ScanLabelsColumn is the table column denoting the scan_labels relation/edge.
	ScanLabelsColumn = "scan_id"
	// AgentTasksTable is the table that holds the agent_tasks relation/edge.
	AgentTasksTable = "agent_tasks"
	// AgentTasksInverseTable is the table name for the AgentTasks entity.
	// It exists in this package in order to avoid circular dependency with the "agenttasks" package.
	AgentTasksInverseTable = "agent_tasks"
	// AgentTasksColumn is the table column denoting the agent_tasks relation/edge.
	AgentTasksColumn = "scan_id"
	// ScanNotificationsTable is the table that holds the scan_notifications relation/edge.
	ScanNotificationsTable = "scan_notifies"
	// ScanNotificationsInverseTable is the table name for the ScanNotify entity.
	// It exists in this package in order to avoid circular dependency with the "scannotify" package.
	ScanNotificationsInverseTable = "scan_notifies"
	// ScanNotificationsColumn is the table column denoting the scan_notifications relation/edge.
	ScanNotificationsColumn = "scan_id"
)

// Columns holds all SQL columns for scans fields.
var Columns = []string{
	FieldID,
	FieldPolicyID,
	FieldStatus,
	FieldImage,
	FieldIntegrationID,
	FieldScanner,
	FieldNotify,
	FieldLabels,
	FieldReport,
	FieldScannerOptions,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus string
	// StatusValidator is a validator for the "status" field. It is called by the builders before save.
	StatusValidator func(string) error
	// DefaultScannerOptions holds the default value on creation for the "scanner_options" field.
	DefaultScannerOptions map[string]string
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Scans queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPolicyID orders the results by the policy_id field.
func ByPolicyID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPolicyID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByImage orders the results by the image field.
func ByImage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImage, opts...).ToFunc()
}

// ByIntegrationID orders the results by the integration_id field.
func ByIntegrationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIntegrationID, opts...).ToFunc()
}

// ByScanner orders the results by the scanner field.
func ByScanner(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScanner, opts...).ToFunc()
}

// ByPolicyField orders the results by policy field.
func ByPolicyField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPolicyStep(), sql.OrderByField(field, opts...))
	}
}

// ByIntegrationsField orders the results by integrations field.
func ByIntegrationsField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIntegrationsStep(), sql.OrderByField(field, opts...))
	}
}

// ByScanLabelsCount orders the results by scan_labels count.
func ByScanLabelsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newScanLabelsStep(), opts...)
	}
}

// ByScanLabels orders the results by scan_labels terms.
func ByScanLabels(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newScanLabelsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAgentTasksCount orders the results by agent_tasks count.
func ByAgentTasksCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAgentTasksStep(), opts...)
	}
}

// ByAgentTasks orders the results by agent_tasks terms.
func ByAgentTasks(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAgentTasksStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByScanNotificationsCount orders the results by scan_notifications count.
func ByScanNotificationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newScanNotificationsStep(), opts...)
	}
}

// ByScanNotifications orders the results by scan_notifications terms.
func ByScanNotifications(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newScanNotificationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newPolicyStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PolicyInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PolicyTable, PolicyColumn),
	)
}
func newIntegrationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IntegrationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, IntegrationsTable, IntegrationsColumn),
	)
}
func newScanLabelsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ScanLabelsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ScanLabelsTable, ScanLabelsColumn),
	)
}
func newAgentTasksStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AgentTasksInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, AgentTasksTable, AgentTasksColumn),
	)
}
func newScanNotificationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ScanNotificationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ScanNotificationsTable, ScanNotificationsColumn),
	)
}
