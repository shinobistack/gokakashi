// Code generated by ent, DO NOT EDIT.

package agenttasks

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the agenttasks type in the database.
	Label = "agent_tasks"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAgentID holds the string denoting the agent_id field in the database.
	FieldAgentID = "agent_id"
	// FieldScanID holds the string denoting the scan_id field in the database.
	FieldScanID = "scan_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeAgent holds the string denoting the agent edge name in mutations.
	EdgeAgent = "agent"
	// EdgeScan holds the string denoting the scan edge name in mutations.
	EdgeScan = "scan"
	// Table holds the table name of the agenttasks in the database.
	Table = "agent_tasks"
	// AgentTable is the table that holds the agent relation/edge.
	AgentTable = "agent_tasks"
	// AgentInverseTable is the table name for the Agents entity.
	// It exists in this package in order to avoid circular dependency with the "agents" package.
	AgentInverseTable = "agents"
	// AgentColumn is the table column denoting the agent relation/edge.
	AgentColumn = "agent_id"
	// ScanTable is the table that holds the scan relation/edge.
	ScanTable = "agent_tasks"
	// ScanInverseTable is the table name for the Scans entity.
	// It exists in this package in order to avoid circular dependency with the "scans" package.
	ScanInverseTable = "scans"
	// ScanColumn is the table column denoting the scan relation/edge.
	ScanColumn = "scan_id"
)

// Columns holds all SQL columns for agenttasks fields.
var Columns = []string{
	FieldID,
	FieldAgentID,
	FieldScanID,
	FieldStatus,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultStatus holds the default value on creation for the "status" field.
	DefaultStatus string
	// StatusValidator is a validator for the "status" field. It is called by the builders before save.
	StatusValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the AgentTasks queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAgentID orders the results by the agent_id field.
func ByAgentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAgentID, opts...).ToFunc()
}

// ByScanID orders the results by the scan_id field.
func ByScanID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScanID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByAgentField orders the results by agent field.
func ByAgentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAgentStep(), sql.OrderByField(field, opts...))
	}
}

// ByScanField orders the results by scan field.
func ByScanField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newScanStep(), sql.OrderByField(field, opts...))
	}
}
func newAgentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AgentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, AgentTable, AgentColumn),
	)
}
func newScanStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ScanInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ScanTable, ScanColumn),
	)
}
