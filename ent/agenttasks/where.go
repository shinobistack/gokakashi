// Code generated by ent, DO NOT EDIT.

package agenttasks

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/shinobistack/gokakashi/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.AgentTasks {
	return predicate.AgentTasks(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.AgentTasks {
	return predicate.AgentTasks(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.AgentTasks {
	return predicate.AgentTasks(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.AgentTasks {
	return predicate.AgentTasks(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.AgentTasks {
	return predicate.AgentTasks(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.AgentTasks {
	return predicate.AgentTasks(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.AgentTasks {
	return predicate.AgentTasks(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.AgentTasks {
	return predicate.AgentTasks(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.AgentTasks {
	return predicate.AgentTasks(sql.FieldLTE(FieldID, id))
}

// AgentID applies equality check predicate on the "agent_id" field. It's identical to AgentIDEQ.
func AgentID(v int) predicate.AgentTasks {
	return predicate.AgentTasks(sql.FieldEQ(FieldAgentID, v))
}

// ScanID applies equality check predicate on the "scan_id" field. It's identical to ScanIDEQ.
func ScanID(v uuid.UUID) predicate.AgentTasks {
	return predicate.AgentTasks(sql.FieldEQ(FieldScanID, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.AgentTasks {
	return predicate.AgentTasks(sql.FieldEQ(FieldStatus, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.AgentTasks {
	return predicate.AgentTasks(sql.FieldEQ(FieldCreatedAt, v))
}

// AgentIDEQ applies the EQ predicate on the "agent_id" field.
func AgentIDEQ(v int) predicate.AgentTasks {
	return predicate.AgentTasks(sql.FieldEQ(FieldAgentID, v))
}

// AgentIDNEQ applies the NEQ predicate on the "agent_id" field.
func AgentIDNEQ(v int) predicate.AgentTasks {
	return predicate.AgentTasks(sql.FieldNEQ(FieldAgentID, v))
}

// AgentIDIn applies the In predicate on the "agent_id" field.
func AgentIDIn(vs ...int) predicate.AgentTasks {
	return predicate.AgentTasks(sql.FieldIn(FieldAgentID, vs...))
}

// AgentIDNotIn applies the NotIn predicate on the "agent_id" field.
func AgentIDNotIn(vs ...int) predicate.AgentTasks {
	return predicate.AgentTasks(sql.FieldNotIn(FieldAgentID, vs...))
}

// ScanIDEQ applies the EQ predicate on the "scan_id" field.
func ScanIDEQ(v uuid.UUID) predicate.AgentTasks {
	return predicate.AgentTasks(sql.FieldEQ(FieldScanID, v))
}

// ScanIDNEQ applies the NEQ predicate on the "scan_id" field.
func ScanIDNEQ(v uuid.UUID) predicate.AgentTasks {
	return predicate.AgentTasks(sql.FieldNEQ(FieldScanID, v))
}

// ScanIDIn applies the In predicate on the "scan_id" field.
func ScanIDIn(vs ...uuid.UUID) predicate.AgentTasks {
	return predicate.AgentTasks(sql.FieldIn(FieldScanID, vs...))
}

// ScanIDNotIn applies the NotIn predicate on the "scan_id" field.
func ScanIDNotIn(vs ...uuid.UUID) predicate.AgentTasks {
	return predicate.AgentTasks(sql.FieldNotIn(FieldScanID, vs...))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.AgentTasks {
	return predicate.AgentTasks(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.AgentTasks {
	return predicate.AgentTasks(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.AgentTasks {
	return predicate.AgentTasks(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.AgentTasks {
	return predicate.AgentTasks(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.AgentTasks {
	return predicate.AgentTasks(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.AgentTasks {
	return predicate.AgentTasks(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.AgentTasks {
	return predicate.AgentTasks(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.AgentTasks {
	return predicate.AgentTasks(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.AgentTasks {
	return predicate.AgentTasks(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.AgentTasks {
	return predicate.AgentTasks(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.AgentTasks {
	return predicate.AgentTasks(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.AgentTasks {
	return predicate.AgentTasks(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.AgentTasks {
	return predicate.AgentTasks(sql.FieldContainsFold(FieldStatus, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.AgentTasks {
	return predicate.AgentTasks(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.AgentTasks {
	return predicate.AgentTasks(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.AgentTasks {
	return predicate.AgentTasks(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.AgentTasks {
	return predicate.AgentTasks(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.AgentTasks {
	return predicate.AgentTasks(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.AgentTasks {
	return predicate.AgentTasks(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.AgentTasks {
	return predicate.AgentTasks(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.AgentTasks {
	return predicate.AgentTasks(sql.FieldLTE(FieldCreatedAt, v))
}

// HasAgent applies the HasEdge predicate on the "agent" edge.
func HasAgent() predicate.AgentTasks {
	return predicate.AgentTasks(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, AgentTable, AgentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAgentWith applies the HasEdge predicate on the "agent" edge with a given conditions (other predicates).
func HasAgentWith(preds ...predicate.Agents) predicate.AgentTasks {
	return predicate.AgentTasks(func(s *sql.Selector) {
		step := newAgentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasScan applies the HasEdge predicate on the "scan" edge.
func HasScan() predicate.AgentTasks {
	return predicate.AgentTasks(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ScanTable, ScanColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasScanWith applies the HasEdge predicate on the "scan" edge with a given conditions (other predicates).
func HasScanWith(preds ...predicate.Scans) predicate.AgentTasks {
	return predicate.AgentTasks(func(s *sql.Selector) {
		step := newScanStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AgentTasks) predicate.AgentTasks {
	return predicate.AgentTasks(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AgentTasks) predicate.AgentTasks {
	return predicate.AgentTasks(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AgentTasks) predicate.AgentTasks {
	return predicate.AgentTasks(sql.NotPredicates(p))
}
