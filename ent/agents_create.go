// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/shinobistack/gokakashi/ent/agentlabels"
	"github.com/shinobistack/gokakashi/ent/agents"
	"github.com/shinobistack/gokakashi/ent/agenttasks"
)

// AgentsCreate is the builder for creating a Agents entity.
type AgentsCreate struct {
	config
	mutation *AgentsMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (ac *AgentsCreate) SetName(s string) *AgentsCreate {
	ac.mutation.SetName(s)
	return ac
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ac *AgentsCreate) SetNillableName(s *string) *AgentsCreate {
	if s != nil {
		ac.SetName(*s)
	}
	return ac
}

// SetStatus sets the "status" field.
func (ac *AgentsCreate) SetStatus(s string) *AgentsCreate {
	ac.mutation.SetStatus(s)
	return ac
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ac *AgentsCreate) SetNillableStatus(s *string) *AgentsCreate {
	if s != nil {
		ac.SetStatus(*s)
	}
	return ac
}

// SetWorkspace sets the "workspace" field.
func (ac *AgentsCreate) SetWorkspace(s string) *AgentsCreate {
	ac.mutation.SetWorkspace(s)
	return ac
}

// SetNillableWorkspace sets the "workspace" field if the given value is not nil.
func (ac *AgentsCreate) SetNillableWorkspace(s *string) *AgentsCreate {
	if s != nil {
		ac.SetWorkspace(*s)
	}
	return ac
}

// SetServer sets the "server" field.
func (ac *AgentsCreate) SetServer(s string) *AgentsCreate {
	ac.mutation.SetServer(s)
	return ac
}

// SetNillableServer sets the "server" field if the given value is not nil.
func (ac *AgentsCreate) SetNillableServer(s *string) *AgentsCreate {
	if s != nil {
		ac.SetServer(*s)
	}
	return ac
}

// SetLastSeen sets the "last_seen" field.
func (ac *AgentsCreate) SetLastSeen(t time.Time) *AgentsCreate {
	ac.mutation.SetLastSeen(t)
	return ac
}

// SetNillableLastSeen sets the "last_seen" field if the given value is not nil.
func (ac *AgentsCreate) SetNillableLastSeen(t *time.Time) *AgentsCreate {
	if t != nil {
		ac.SetLastSeen(*t)
	}
	return ac
}

// SetID sets the "id" field.
func (ac *AgentsCreate) SetID(i int) *AgentsCreate {
	ac.mutation.SetID(i)
	return ac
}

// AddAgentTaskIDs adds the "agent_tasks" edge to the AgentTasks entity by IDs.
func (ac *AgentsCreate) AddAgentTaskIDs(ids ...uuid.UUID) *AgentsCreate {
	ac.mutation.AddAgentTaskIDs(ids...)
	return ac
}

// AddAgentTasks adds the "agent_tasks" edges to the AgentTasks entity.
func (ac *AgentsCreate) AddAgentTasks(a ...*AgentTasks) *AgentsCreate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ac.AddAgentTaskIDs(ids...)
}

// AddAgentLabelIDs adds the "agent_labels" edge to the AgentLabels entity by IDs.
func (ac *AgentsCreate) AddAgentLabelIDs(ids ...int) *AgentsCreate {
	ac.mutation.AddAgentLabelIDs(ids...)
	return ac
}

// AddAgentLabels adds the "agent_labels" edges to the AgentLabels entity.
func (ac *AgentsCreate) AddAgentLabels(a ...*AgentLabels) *AgentsCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ac.AddAgentLabelIDs(ids...)
}

// Mutation returns the AgentsMutation object of the builder.
func (ac *AgentsCreate) Mutation() *AgentsMutation {
	return ac.mutation
}

// Save creates the Agents in the database.
func (ac *AgentsCreate) Save(ctx context.Context) (*Agents, error) {
	ac.defaults()
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AgentsCreate) SaveX(ctx context.Context) *Agents {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AgentsCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AgentsCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *AgentsCreate) defaults() {
	if _, ok := ac.mutation.Status(); !ok {
		v := agents.DefaultStatus
		ac.mutation.SetStatus(v)
	}
	if _, ok := ac.mutation.LastSeen(); !ok {
		v := agents.DefaultLastSeen()
		ac.mutation.SetLastSeen(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AgentsCreate) check() error {
	if _, ok := ac.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Agents.status"`)}
	}
	if v, ok := ac.mutation.Status(); ok {
		if err := agents.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Agents.status": %w`, err)}
		}
	}
	if _, ok := ac.mutation.LastSeen(); !ok {
		return &ValidationError{Name: "last_seen", err: errors.New(`ent: missing required field "Agents.last_seen"`)}
	}
	return nil
}

func (ac *AgentsCreate) sqlSave(ctx context.Context) (*Agents, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *AgentsCreate) createSpec() (*Agents, *sqlgraph.CreateSpec) {
	var (
		_node = &Agents{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(agents.Table, sqlgraph.NewFieldSpec(agents.FieldID, field.TypeInt))
	)
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ac.mutation.Name(); ok {
		_spec.SetField(agents.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ac.mutation.Status(); ok {
		_spec.SetField(agents.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := ac.mutation.Workspace(); ok {
		_spec.SetField(agents.FieldWorkspace, field.TypeString, value)
		_node.Workspace = value
	}
	if value, ok := ac.mutation.Server(); ok {
		_spec.SetField(agents.FieldServer, field.TypeString, value)
		_node.Server = value
	}
	if value, ok := ac.mutation.LastSeen(); ok {
		_spec.SetField(agents.FieldLastSeen, field.TypeTime, value)
		_node.LastSeen = value
	}
	if nodes := ac.mutation.AgentTasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agents.AgentTasksTable,
			Columns: []string{agents.AgentTasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agenttasks.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.AgentLabelsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agents.AgentLabelsTable,
			Columns: []string{agents.AgentLabelsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agentlabels.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AgentsCreateBulk is the builder for creating many Agents entities in bulk.
type AgentsCreateBulk struct {
	config
	err      error
	builders []*AgentsCreate
}

// Save creates the Agents entities in the database.
func (acb *AgentsCreateBulk) Save(ctx context.Context) ([]*Agents, error) {
	if acb.err != nil {
		return nil, acb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Agents, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AgentsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AgentsCreateBulk) SaveX(ctx context.Context) []*Agents {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AgentsCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AgentsCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}
