// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// IntegrationTypesColumns holds the columns for the "integration_types" table.
	IntegrationTypesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "display_name", Type: field.TypeString, Unique: true},
	}
	// IntegrationTypesTable holds the schema information for the "integration_types" table.
	IntegrationTypesTable = &schema.Table{
		Name:       "integration_types",
		Columns:    IntegrationTypesColumns,
		PrimaryKey: []*schema.Column{IntegrationTypesColumns[0]},
	}
	// IntegrationsColumns holds the columns for the "integrations" table.
	IntegrationsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "name", Type: field.TypeString, Unique: true},
		{Name: "type", Type: field.TypeString},
		{Name: "config", Type: field.TypeJSON},
		{Name: "integration_type_integrations", Type: field.TypeString, Nullable: true},
	}
	// IntegrationsTable holds the schema information for the "integrations" table.
	IntegrationsTable = &schema.Table{
		Name:       "integrations",
		Columns:    IntegrationsColumns,
		PrimaryKey: []*schema.Column{IntegrationsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "integrations_integration_types_integrations",
				Columns:    []*schema.Column{IntegrationsColumns[4]},
				RefColumns: []*schema.Column{IntegrationTypesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// PoliciesColumns holds the columns for the "policies" table.
	PoliciesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "name", Type: field.TypeString, Unique: true},
		{Name: "image", Type: field.TypeJSON},
		{Name: "labels", Type: field.TypeJSON, Nullable: true},
		{Name: "trigger", Type: field.TypeJSON, Nullable: true},
		{Name: "check", Type: field.TypeJSON, Nullable: true},
	}
	// PoliciesTable holds the schema information for the "policies" table.
	PoliciesTable = &schema.Table{
		Name:       "policies",
		Columns:    PoliciesColumns,
		PrimaryKey: []*schema.Column{PoliciesColumns[0]},
	}
	// PolicyLabelsColumns holds the columns for the "policy_labels" table.
	PolicyLabelsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "key", Type: field.TypeString},
		{Name: "value", Type: field.TypeString},
		{Name: "policy_id", Type: field.TypeUUID},
	}
	// PolicyLabelsTable holds the schema information for the "policy_labels" table.
	PolicyLabelsTable = &schema.Table{
		Name:       "policy_labels",
		Columns:    PolicyLabelsColumns,
		PrimaryKey: []*schema.Column{PolicyLabelsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "policy_labels_policies_policy_labels",
				Columns:    []*schema.Column{PolicyLabelsColumns[3]},
				RefColumns: []*schema.Column{PoliciesColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		IntegrationTypesTable,
		IntegrationsTable,
		PoliciesTable,
		PolicyLabelsTable,
	}
)

func init() {
	IntegrationsTable.ForeignKeys[0].RefTable = IntegrationTypesTable
	PolicyLabelsTable.ForeignKeys[0].RefTable = PoliciesTable
}
