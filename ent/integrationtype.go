// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/shinobistack/gokakashi/ent/integrationtype"
)

// IntegrationType is the model entity for the IntegrationType schema.
type IntegrationType struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Human-readable name for the integration type
	DisplayName string `json:"display_name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the IntegrationTypeQuery when eager-loading is set.
	Edges        IntegrationTypeEdges `json:"edges"`
	selectValues sql.SelectValues
}

// IntegrationTypeEdges holds the relations/edges for other nodes in the graph.
type IntegrationTypeEdges struct {
	// Integrations holds the value of the integrations edge.
	Integrations []*Integrations `json:"integrations,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// IntegrationsOrErr returns the Integrations value or an error if the edge
// was not loaded in eager-loading.
func (e IntegrationTypeEdges) IntegrationsOrErr() ([]*Integrations, error) {
	if e.loadedTypes[0] {
		return e.Integrations, nil
	}
	return nil, &NotLoadedError{edge: "integrations"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*IntegrationType) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case integrationtype.FieldID, integrationtype.FieldDisplayName:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the IntegrationType fields.
func (it *IntegrationType) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case integrationtype.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				it.ID = value.String
			}
		case integrationtype.FieldDisplayName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_name", values[i])
			} else if value.Valid {
				it.DisplayName = value.String
			}
		default:
			it.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the IntegrationType.
// This includes values selected through modifiers, order, etc.
func (it *IntegrationType) Value(name string) (ent.Value, error) {
	return it.selectValues.Get(name)
}

// QueryIntegrations queries the "integrations" edge of the IntegrationType entity.
func (it *IntegrationType) QueryIntegrations() *IntegrationsQuery {
	return NewIntegrationTypeClient(it.config).QueryIntegrations(it)
}

// Update returns a builder for updating this IntegrationType.
// Note that you need to call IntegrationType.Unwrap() before calling this method if this IntegrationType
// was returned from a transaction, and the transaction was committed or rolled back.
func (it *IntegrationType) Update() *IntegrationTypeUpdateOne {
	return NewIntegrationTypeClient(it.config).UpdateOne(it)
}

// Unwrap unwraps the IntegrationType entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (it *IntegrationType) Unwrap() *IntegrationType {
	_tx, ok := it.config.driver.(*txDriver)
	if !ok {
		panic("ent: IntegrationType is not a transactional entity")
	}
	it.config.driver = _tx.drv
	return it
}

// String implements the fmt.Stringer.
func (it *IntegrationType) String() string {
	var builder strings.Builder
	builder.WriteString("IntegrationType(")
	builder.WriteString(fmt.Sprintf("id=%v, ", it.ID))
	builder.WriteString("display_name=")
	builder.WriteString(it.DisplayName)
	builder.WriteByte(')')
	return builder.String()
}

// IntegrationTypes is a parsable slice of IntegrationType.
type IntegrationTypes []*IntegrationType
