// Code generated by ent, DO NOT EDIT.

package policylabels

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the policylabels type in the database.
	Label = "policy_labels"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPolicyID holds the string denoting the policy_id field in the database.
	FieldPolicyID = "policy_id"
	// FieldKey holds the string denoting the key field in the database.
	FieldKey = "key"
	// FieldValue holds the string denoting the value field in the database.
	FieldValue = "value"
	// EdgePolicy holds the string denoting the policy edge name in mutations.
	EdgePolicy = "policy"
	// Table holds the table name of the policylabels in the database.
	Table = "policy_labels"
	// PolicyTable is the table that holds the policy relation/edge.
	PolicyTable = "policy_labels"
	// PolicyInverseTable is the table name for the Policies entity.
	// It exists in this package in order to avoid circular dependency with the "policies" package.
	PolicyInverseTable = "policies"
	// PolicyColumn is the table column denoting the policy relation/edge.
	PolicyColumn = "policy_id"
)

// Columns holds all SQL columns for policylabels fields.
var Columns = []string{
	FieldID,
	FieldPolicyID,
	FieldKey,
	FieldValue,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// KeyValidator is a validator for the "key" field. It is called by the builders before save.
	KeyValidator func(string) error
	// ValueValidator is a validator for the "value" field. It is called by the builders before save.
	ValueValidator func(string) error
)

// OrderOption defines the ordering options for the PolicyLabels queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPolicyID orders the results by the policy_id field.
func ByPolicyID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPolicyID, opts...).ToFunc()
}

// ByKey orders the results by the key field.
func ByKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKey, opts...).ToFunc()
}

// ByValue orders the results by the value field.
func ByValue(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldValue, opts...).ToFunc()
}

// ByPolicyField orders the results by policy field.
func ByPolicyField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPolicyStep(), sql.OrderByField(field, opts...))
	}
}
func newPolicyStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PolicyInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PolicyTable, PolicyColumn),
	)
}
