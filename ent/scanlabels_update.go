// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/shinobistack/gokakashi/ent/predicate"
	"github.com/shinobistack/gokakashi/ent/scanlabels"
	"github.com/shinobistack/gokakashi/ent/scans"
)

// ScanLabelsUpdate is the builder for updating ScanLabels entities.
type ScanLabelsUpdate struct {
	config
	hooks    []Hook
	mutation *ScanLabelsMutation
}

// Where appends a list predicates to the ScanLabelsUpdate builder.
func (slu *ScanLabelsUpdate) Where(ps ...predicate.ScanLabels) *ScanLabelsUpdate {
	slu.mutation.Where(ps...)
	return slu
}

// SetScanID sets the "scan_id" field.
func (slu *ScanLabelsUpdate) SetScanID(u uuid.UUID) *ScanLabelsUpdate {
	slu.mutation.SetScanID(u)
	return slu
}

// SetNillableScanID sets the "scan_id" field if the given value is not nil.
func (slu *ScanLabelsUpdate) SetNillableScanID(u *uuid.UUID) *ScanLabelsUpdate {
	if u != nil {
		slu.SetScanID(*u)
	}
	return slu
}

// SetKey sets the "key" field.
func (slu *ScanLabelsUpdate) SetKey(s string) *ScanLabelsUpdate {
	slu.mutation.SetKey(s)
	return slu
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (slu *ScanLabelsUpdate) SetNillableKey(s *string) *ScanLabelsUpdate {
	if s != nil {
		slu.SetKey(*s)
	}
	return slu
}

// SetValue sets the "value" field.
func (slu *ScanLabelsUpdate) SetValue(s string) *ScanLabelsUpdate {
	slu.mutation.SetValue(s)
	return slu
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (slu *ScanLabelsUpdate) SetNillableValue(s *string) *ScanLabelsUpdate {
	if s != nil {
		slu.SetValue(*s)
	}
	return slu
}

// SetScan sets the "scan" edge to the Scans entity.
func (slu *ScanLabelsUpdate) SetScan(s *Scans) *ScanLabelsUpdate {
	return slu.SetScanID(s.ID)
}

// Mutation returns the ScanLabelsMutation object of the builder.
func (slu *ScanLabelsUpdate) Mutation() *ScanLabelsMutation {
	return slu.mutation
}

// ClearScan clears the "scan" edge to the Scans entity.
func (slu *ScanLabelsUpdate) ClearScan() *ScanLabelsUpdate {
	slu.mutation.ClearScan()
	return slu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (slu *ScanLabelsUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, slu.sqlSave, slu.mutation, slu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (slu *ScanLabelsUpdate) SaveX(ctx context.Context) int {
	affected, err := slu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (slu *ScanLabelsUpdate) Exec(ctx context.Context) error {
	_, err := slu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (slu *ScanLabelsUpdate) ExecX(ctx context.Context) {
	if err := slu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (slu *ScanLabelsUpdate) check() error {
	if v, ok := slu.mutation.Key(); ok {
		if err := scanlabels.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`ent: validator failed for field "ScanLabels.key": %w`, err)}
		}
	}
	if v, ok := slu.mutation.Value(); ok {
		if err := scanlabels.ValueValidator(v); err != nil {
			return &ValidationError{Name: "value", err: fmt.Errorf(`ent: validator failed for field "ScanLabels.value": %w`, err)}
		}
	}
	if slu.mutation.ScanCleared() && len(slu.mutation.ScanIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ScanLabels.scan"`)
	}
	return nil
}

func (slu *ScanLabelsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := slu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(scanlabels.Table, scanlabels.Columns, sqlgraph.NewFieldSpec(scanlabels.FieldID, field.TypeInt))
	if ps := slu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := slu.mutation.Key(); ok {
		_spec.SetField(scanlabels.FieldKey, field.TypeString, value)
	}
	if value, ok := slu.mutation.Value(); ok {
		_spec.SetField(scanlabels.FieldValue, field.TypeString, value)
	}
	if slu.mutation.ScanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scanlabels.ScanTable,
			Columns: []string{scanlabels.ScanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scans.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := slu.mutation.ScanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scanlabels.ScanTable,
			Columns: []string{scanlabels.ScanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scans.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, slu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scanlabels.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	slu.mutation.done = true
	return n, nil
}

// ScanLabelsUpdateOne is the builder for updating a single ScanLabels entity.
type ScanLabelsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ScanLabelsMutation
}

// SetScanID sets the "scan_id" field.
func (sluo *ScanLabelsUpdateOne) SetScanID(u uuid.UUID) *ScanLabelsUpdateOne {
	sluo.mutation.SetScanID(u)
	return sluo
}

// SetNillableScanID sets the "scan_id" field if the given value is not nil.
func (sluo *ScanLabelsUpdateOne) SetNillableScanID(u *uuid.UUID) *ScanLabelsUpdateOne {
	if u != nil {
		sluo.SetScanID(*u)
	}
	return sluo
}

// SetKey sets the "key" field.
func (sluo *ScanLabelsUpdateOne) SetKey(s string) *ScanLabelsUpdateOne {
	sluo.mutation.SetKey(s)
	return sluo
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (sluo *ScanLabelsUpdateOne) SetNillableKey(s *string) *ScanLabelsUpdateOne {
	if s != nil {
		sluo.SetKey(*s)
	}
	return sluo
}

// SetValue sets the "value" field.
func (sluo *ScanLabelsUpdateOne) SetValue(s string) *ScanLabelsUpdateOne {
	sluo.mutation.SetValue(s)
	return sluo
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (sluo *ScanLabelsUpdateOne) SetNillableValue(s *string) *ScanLabelsUpdateOne {
	if s != nil {
		sluo.SetValue(*s)
	}
	return sluo
}

// SetScan sets the "scan" edge to the Scans entity.
func (sluo *ScanLabelsUpdateOne) SetScan(s *Scans) *ScanLabelsUpdateOne {
	return sluo.SetScanID(s.ID)
}

// Mutation returns the ScanLabelsMutation object of the builder.
func (sluo *ScanLabelsUpdateOne) Mutation() *ScanLabelsMutation {
	return sluo.mutation
}

// ClearScan clears the "scan" edge to the Scans entity.
func (sluo *ScanLabelsUpdateOne) ClearScan() *ScanLabelsUpdateOne {
	sluo.mutation.ClearScan()
	return sluo
}

// Where appends a list predicates to the ScanLabelsUpdate builder.
func (sluo *ScanLabelsUpdateOne) Where(ps ...predicate.ScanLabels) *ScanLabelsUpdateOne {
	sluo.mutation.Where(ps...)
	return sluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sluo *ScanLabelsUpdateOne) Select(field string, fields ...string) *ScanLabelsUpdateOne {
	sluo.fields = append([]string{field}, fields...)
	return sluo
}

// Save executes the query and returns the updated ScanLabels entity.
func (sluo *ScanLabelsUpdateOne) Save(ctx context.Context) (*ScanLabels, error) {
	return withHooks(ctx, sluo.sqlSave, sluo.mutation, sluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sluo *ScanLabelsUpdateOne) SaveX(ctx context.Context) *ScanLabels {
	node, err := sluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sluo *ScanLabelsUpdateOne) Exec(ctx context.Context) error {
	_, err := sluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sluo *ScanLabelsUpdateOne) ExecX(ctx context.Context) {
	if err := sluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sluo *ScanLabelsUpdateOne) check() error {
	if v, ok := sluo.mutation.Key(); ok {
		if err := scanlabels.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`ent: validator failed for field "ScanLabels.key": %w`, err)}
		}
	}
	if v, ok := sluo.mutation.Value(); ok {
		if err := scanlabels.ValueValidator(v); err != nil {
			return &ValidationError{Name: "value", err: fmt.Errorf(`ent: validator failed for field "ScanLabels.value": %w`, err)}
		}
	}
	if sluo.mutation.ScanCleared() && len(sluo.mutation.ScanIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ScanLabels.scan"`)
	}
	return nil
}

func (sluo *ScanLabelsUpdateOne) sqlSave(ctx context.Context) (_node *ScanLabels, err error) {
	if err := sluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(scanlabels.Table, scanlabels.Columns, sqlgraph.NewFieldSpec(scanlabels.FieldID, field.TypeInt))
	id, ok := sluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ScanLabels.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, scanlabels.FieldID)
		for _, f := range fields {
			if !scanlabels.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != scanlabels.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sluo.mutation.Key(); ok {
		_spec.SetField(scanlabels.FieldKey, field.TypeString, value)
	}
	if value, ok := sluo.mutation.Value(); ok {
		_spec.SetField(scanlabels.FieldValue, field.TypeString, value)
	}
	if sluo.mutation.ScanCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scanlabels.ScanTable,
			Columns: []string{scanlabels.ScanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scans.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sluo.mutation.ScanIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   scanlabels.ScanTable,
			Columns: []string{scanlabels.ScanColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(scans.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ScanLabels{config: sluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scanlabels.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sluo.mutation.done = true
	return _node, nil
}
